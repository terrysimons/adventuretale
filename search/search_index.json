{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Reference Glitchy Games event module. This module contains the event substrate for handling higher level events in the game engine. Many events are 1:1 with pygame events, but some are synthesized. For example, a mouse drop event is a synthesized event that is triggered by a mouse button down event followed by a mouse motion event followed by a mouse button up event. AllEventStubs Bases: AudioEventStubs , ControllerEventStubs , DropEventStubs , TouchEventStubs , FontEventStubs , GameEventStubs , JoystickEventStubs , KeyboardEventStubs , MidiEventStubs , MouseEventStubs , TextEventStubs , WindowEventStubs Mixin for all event stubs. Source code in glitchygames/events/__init__.py 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 class AllEventStubs ( AudioEventStubs , ControllerEventStubs , DropEventStubs , TouchEventStubs , FontEventStubs , GameEventStubs , JoystickEventStubs , KeyboardEventStubs , MidiEventStubs , MouseEventStubs , TextEventStubs , WindowEventStubs ): \"\"\"Mixin for all event stubs.\"\"\" AllEvents Bases: AudioEvents , ControllerEvents , DropEvents , TouchEvents , FontEvents , GameEvents , JoystickEvents , KeyboardEvents , MidiEvents , MouseEvents , TextEvents , WindowEvents Mixin for all events. Source code in glitchygames/events/__init__.py 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 class AllEvents ( AudioEvents , ControllerEvents , DropEvents , TouchEvents , FontEvents , GameEvents , JoystickEvents , KeyboardEvents , MidiEvents , MouseEvents , TextEvents , WindowEvents ): \"\"\"Mixin for all events.\"\"\" AudioEventStubs Bases: AudioEvents Mixin for audio events. Source code in glitchygames/events/__init__.py 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 class AudioEventStubs ( AudioEvents ): \"\"\"Mixin for audio events.\"\"\" @functools . cache def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEADDED which, iscapture return unhandled_event ( self , event ) @functools . cache def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEREMOVED which, iscapture return unhandled_event ( self , event ) on_audio_device_added_event ( event ) cached Handle audio device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 408 409 410 411 412 413 414 415 416 417 418 419 @functools . cache def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEADDED which, iscapture return unhandled_event ( self , event ) on_audio_device_removed_event ( event ) cached Handle audio device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 421 422 423 424 425 426 427 428 429 430 431 432 @functools . cache def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEREMOVED which, iscapture return unhandled_event ( self , event ) AudioEvents Bases: EventInterface Mixin for audio events. Source code in glitchygames/events/__init__.py 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 class AudioEvents ( EventInterface ): \"\"\"Mixin for audio events.\"\"\" @abc . abstractmethod def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEADDED which, iscapture @abc . abstractmethod def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_audio_device_added_event ( event ) abstractmethod Handle audio device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 380 381 382 383 384 385 386 387 388 389 @abc . abstractmethod def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_audio_device_removed_event ( event ) abstractmethod Handle audio device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 392 393 394 395 396 397 398 399 400 401 @abc . abstractmethod def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" ControllerEventStubs Bases: ControllerEvents Mixin for controller events. Source code in glitchygames/events/__init__.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 class ControllerEventStubs ( ControllerEvents ): \"\"\"Mixin for controller events.\"\"\" @functools . cache def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERAXISMOTION joy, axis, value unhandled_event ( self , event ) @functools . cache def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONDOWN joy, button unhandled_event ( self , event ) @functools . cache def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONUP joy, button unhandled_event ( self , event ) @functools . cache def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEADDED device_index, guid unhandled_event ( self , event ) @functools . cache def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMAPPED device_index unhandled_event ( self , event ) @functools . cache def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMOVED device_index unhandled_event ( self , event ) @functools . cache def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADDOWN joy, touchpad unhandled_event ( self , event ) @functools . cache def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADMOTION joy, touchpad unhandled_event ( self , event ) @functools . cache def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADUP joy, touchpad unhandled_event ( self , event ) on_controller_axis_motion_event ( event ) cached Handle controller axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 556 557 558 559 560 561 562 563 564 565 566 567 @functools . cache def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERAXISMOTION joy, axis, value unhandled_event ( self , event ) on_controller_button_down_event ( event ) cached Handle controller button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 569 570 571 572 573 574 575 576 577 578 579 580 @functools . cache def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONDOWN joy, button unhandled_event ( self , event ) on_controller_button_up_event ( event ) cached Handle controller button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 582 583 584 585 586 587 588 589 590 591 592 593 @functools . cache def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONUP joy, button unhandled_event ( self , event ) on_controller_device_added_event ( event ) cached Handle controller device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 595 596 597 598 599 600 601 602 603 604 605 606 @functools . cache def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEADDED device_index, guid unhandled_event ( self , event ) on_controller_device_remapped_event ( event ) cached Handle controller device remapped events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 608 609 610 611 612 613 614 615 616 617 618 619 @functools . cache def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMAPPED device_index unhandled_event ( self , event ) on_controller_device_removed_event ( event ) cached Handle controller device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 621 622 623 624 625 626 627 628 629 630 631 632 @functools . cache def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMOVED device_index unhandled_event ( self , event ) on_controller_touchpad_down_event ( event ) cached Handle controller touchpad down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 634 635 636 637 638 639 640 641 642 643 644 645 @functools . cache def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADDOWN joy, touchpad unhandled_event ( self , event ) on_controller_touchpad_motion_event ( event ) cached Handle controller touchpad motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 647 648 649 650 651 652 653 654 655 656 657 658 @functools . cache def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADMOTION joy, touchpad unhandled_event ( self , event ) on_controller_touchpad_up_event ( event ) cached Handle controller touchpad up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 660 661 662 663 664 665 666 667 668 669 670 671 @functools . cache def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADUP joy, touchpad unhandled_event ( self , event ) ControllerEvents Bases: EventInterface Mixin for controller events. Source code in glitchygames/events/__init__.py 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 class ControllerEvents ( EventInterface ): \"\"\"Mixin for controller events.\"\"\" @abc . abstractmethod def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERAXISMOTION joy, axis, value @abc . abstractmethod def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONDOWN joy, button @abc . abstractmethod def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONUP joy, button @abc . abstractmethod def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEADDED device_index, guid @abc . abstractmethod def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMAPPED device_index @abc . abstractmethod def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMOVED device_index @abc . abstractmethod def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADDOWN joy, touchpad @abc . abstractmethod def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADMOTION joy, touchpad @abc . abstractmethod def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_axis_motion_event ( event ) abstractmethod Handle controller axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 446 447 448 449 450 451 452 453 454 455 @abc . abstractmethod def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_button_down_event ( event ) abstractmethod Handle controller button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 458 459 460 461 462 463 464 465 466 467 @abc . abstractmethod def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_button_up_event ( event ) abstractmethod Handle controller button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 470 471 472 473 474 475 476 477 478 479 @abc . abstractmethod def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_device_added_event ( event ) abstractmethod Handle controller device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 482 483 484 485 486 487 488 489 490 491 @abc . abstractmethod def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_device_remapped_event ( event ) abstractmethod Handle controller device remapped events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 494 495 496 497 498 499 500 501 502 503 @abc . abstractmethod def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_device_removed_event ( event ) abstractmethod Handle controller device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 506 507 508 509 510 511 512 513 514 515 @abc . abstractmethod def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_touchpad_down_event ( event ) abstractmethod Handle controller touchpad down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 518 519 520 521 522 523 524 525 526 527 @abc . abstractmethod def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_touchpad_motion_event ( event ) abstractmethod Handle controller touchpad motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 530 531 532 533 534 535 536 537 538 539 @abc . abstractmethod def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_controller_touchpad_up_event ( event ) abstractmethod Handle controller touchpad up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 542 543 544 545 546 547 548 549 550 551 @abc . abstractmethod def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" DropEventStubs Bases: EventInterface Mixin for drop events. Source code in glitchygames/events/__init__.py 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 class DropEventStubs ( EventInterface ): \"\"\"Mixin for drop events.\"\"\" @functools . cache def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\" # DROPBEGIN none unhandled_event ( self , event ) @functools . cache def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\" # DROPFILE file unhandled_event ( self , event ) @functools . cache def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\" # DROPTEXT text unhandled_event ( self , event ) @functools . cache def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\" # DROPCOMPLETE none unhandled_event ( self , event ) on_drop_begin_event ( event ) cached Handle drop begin event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 730 731 732 733 734 735 736 737 738 739 740 741 @functools . cache def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\" # DROPBEGIN none unhandled_event ( self , event ) on_drop_complete_event ( event ) cached Handle drop complete event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 769 770 771 772 773 774 775 776 777 778 779 780 @functools . cache def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\" # DROPCOMPLETE none unhandled_event ( self , event ) on_drop_file_event ( event ) cached Handle drop file event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 743 744 745 746 747 748 749 750 751 752 753 754 @functools . cache def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\" # DROPFILE file unhandled_event ( self , event ) on_drop_text_event ( event ) cached Handle drop text event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 756 757 758 759 760 761 762 763 764 765 766 767 @functools . cache def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\" # DROPTEXT text unhandled_event ( self , event ) DropEvents Bases: EventInterface Mixin for drop events. Source code in glitchygames/events/__init__.py 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 class DropEvents ( EventInterface ): \"\"\"Mixin for drop events.\"\"\" @abc . abstractmethod def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\" # DROPBEGIN none @abc . abstractmethod def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\" # DROPFILE file @abc . abstractmethod def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\" # DROPTEXT text @abc . abstractmethod def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\" on_drop_begin_event ( event ) abstractmethod Handle drop begin event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 678 679 680 681 682 683 684 685 686 687 @abc . abstractmethod def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\" on_drop_complete_event ( event ) abstractmethod Handle drop complete event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 714 715 716 717 718 719 720 721 722 723 @abc . abstractmethod def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\" on_drop_file_event ( event ) abstractmethod Handle drop file event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 690 691 692 693 694 695 696 697 698 699 @abc . abstractmethod def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\" on_drop_text_event ( event ) abstractmethod Handle drop text event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 702 703 704 705 706 707 708 709 710 711 @abc . abstractmethod def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\" EventInterface Abstract base class for event interfaces. Source code in glitchygames/events/__init__.py 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 class EventInterface ( metaclass = abc . ABCMeta ): # noqa: B024 \"\"\"Abstract base class for event interfaces.\"\"\" @classmethod def __subclasshook__ ( cls : Self , subclass : object ) -> bool : \"\"\"Override the default __subclasshook__ to create an interface.\"\"\" # Note: This accounts for under/dunder methods in addition to regular methods. interface_attributes = set ( cls . __abstractmethods__ ) subclass_attributes = set ( subclass . __abstractmethods__ ) interface_is_implemented = False methods = [] for attribute in sorted ( interface_attributes ): if hasattr ( subclass , attribute ) and attribute not in subclass_attributes : if callable ( getattr ( subclass , attribute )): cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (callable)' ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (attribute))' ) methods . append ( True ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u274c (unimplemented)' ) methods . append ( False ) # all([]) returns True, so mask it # # This protects against an empty attribute list # which would be a misconfiguration of the interface if len ( methods ) and all ( methods ): interface_is_implemented = all ( methods ) return interface_is_implemented __subclasshook__ ( subclass ) classmethod Override the default subclasshook to create an interface. Source code in glitchygames/events/__init__.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 @classmethod def __subclasshook__ ( cls : Self , subclass : object ) -> bool : \"\"\"Override the default __subclasshook__ to create an interface.\"\"\" # Note: This accounts for under/dunder methods in addition to regular methods. interface_attributes = set ( cls . __abstractmethods__ ) subclass_attributes = set ( subclass . __abstractmethods__ ) interface_is_implemented = False methods = [] for attribute in sorted ( interface_attributes ): if hasattr ( subclass , attribute ) and attribute not in subclass_attributes : if callable ( getattr ( subclass , attribute )): cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (callable)' ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (attribute))' ) methods . append ( True ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u274c (unimplemented)' ) methods . append ( False ) # all([]) returns True, so mask it # # This protects against an empty attribute list # which would be a misconfiguration of the interface if len ( methods ) and all ( methods ): interface_is_implemented = all ( methods ) return interface_is_implemented EventManager Bases: ResourceManager Root event manager. Source code in glitchygames/events/__init__.py 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 class EventManager ( ResourceManager ): \"\"\"Root event manager.\"\"\" log : logging . Logger = LOG # Interiting from object is default in Python 3. # Linters complain if you do it. # # This isn't a ResourceManager like other proxies, because # it's the fallthrough event object, so we don't have a proxy. class EventProxy : \"\"\"Proxy for events.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , event_source : object ) -> None : \"\"\"Initialize the event proxy. Args: event_source: The event source. Returns: None \"\"\" super () . __init__ () # No proxies for the root class. self . proxies = [] # This is used for leave objects which # don't have their own proxies. # # Subclassed managers that set their own proxy # will not have this. self . event_source = event_source def unhandled_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Handle unhandled events. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None \"\"\" # inspect.stack()[1] is the call frame above us, so this should be reasonable. event_handler = inspect . stack ()[ 1 ] . function event = kwargs . get ( 'event' ) event_trigger = kwargs . get ( 'trigger' , None ) self . log . debug ( f 'Unhandled Event { event_handler } : ' f ' { self . event_source } -> { event } Event Trigger: { event_trigger } ' ) def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. \"\"\" return self . unhandled_event def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game ) self . proxies = [ EventManager . EventProxy ( event_source = self )] EventProxy Proxy for events. Source code in glitchygames/events/__init__.py 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 class EventProxy : \"\"\"Proxy for events.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , event_source : object ) -> None : \"\"\"Initialize the event proxy. Args: event_source: The event source. Returns: None \"\"\" super () . __init__ () # No proxies for the root class. self . proxies = [] # This is used for leave objects which # don't have their own proxies. # # Subclassed managers that set their own proxy # will not have this. self . event_source = event_source def unhandled_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Handle unhandled events. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None \"\"\" # inspect.stack()[1] is the call frame above us, so this should be reasonable. event_handler = inspect . stack ()[ 1 ] . function event = kwargs . get ( 'event' ) event_trigger = kwargs . get ( 'trigger' , None ) self . log . debug ( f 'Unhandled Event { event_handler } : ' f ' { self . event_source } -> { event } Event Trigger: { event_trigger } ' ) def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. \"\"\" return self . unhandled_event __getattr__ ( attr ) Get an attribute. This method is called when an attribute is not found. Parameters: attr ( str ) \u2013 The attribute to get. Returns: Callable \u2013 The attribute. Source code in glitchygames/events/__init__.py 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. \"\"\" return self . unhandled_event __init__ ( event_source ) Initialize the event proxy. Parameters: event_source ( object ) \u2013 The event source. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 def __init__ ( self : Self , event_source : object ) -> None : \"\"\"Initialize the event proxy. Args: event_source: The event source. Returns: None \"\"\" super () . __init__ () # No proxies for the root class. self . proxies = [] # This is used for leave objects which # don't have their own proxies. # # Subclassed managers that set their own proxy # will not have this. self . event_source = event_source unhandled_event ( * args , ** kwargs ) Handle unhandled events. Parameters: *args \u2013 The positional arguments. **kwargs \u2013 The keyword arguments. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 def unhandled_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Handle unhandled events. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None \"\"\" # inspect.stack()[1] is the call frame above us, so this should be reasonable. event_handler = inspect . stack ()[ 1 ] . function event = kwargs . get ( 'event' ) event_trigger = kwargs . get ( 'trigger' , None ) self . log . debug ( f 'Unhandled Event { event_handler } : ' f ' { self . event_source } -> { event } Event Trigger: { event_trigger } ' ) __init__ ( game = None ) Initialize the event manager. Parameters: game ( object , default: None ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game ) self . proxies = [ EventManager . EventProxy ( event_source = self )] FontEventStubs Bases: EventInterface Mixin for font events. Source code in glitchygames/events/__init__.py 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 class FontEventStubs ( EventInterface ): \"\"\"Mixin for font events.\"\"\" @functools . cache def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FONTS_CHANGED unhandled_event ( self , event ) on_font_changed_event ( event ) cached Handle font changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 @functools . cache def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FONTS_CHANGED unhandled_event ( self , event ) FontEvents Bases: EventInterface Mixin for font events. Source code in glitchygames/events/__init__.py 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 class FontEvents ( EventInterface ): \"\"\"Mixin for font events.\"\"\" @abc . abstractmethod def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_font_changed_event ( event ) abstractmethod Handle font changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 @abc . abstractmethod def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" GameEventStubs Bases: EventInterface Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. Source code in glitchygames/events/__init__.py 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 class GameEventStubs ( EventInterface ): \"\"\"Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. \"\"\" @functools . cache def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # ACTIVEEVENT gain, state unhandled_event ( self , event ) @functools . cache def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 unhandled_event ( self , event ) @functools . cache def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 unhandled_event ( self , event ) @functools . cache def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 unhandled_event ( self , event ) @functools . cache def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # SYSWMEVENT unhandled_event ( self , event ) @functools . cache def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # USEREVENT code unhandled_event ( self , event ) @functools . cache def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEOEXPOSE none unhandled_event ( self , event ) @functools . cache def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEORESIZE size, w, h unhandled_event ( self , event ) @functools . cache def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # QUIT none unhandled_event ( self , event ) on_active_event ( event ) cached Handle active events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 @functools . cache def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # ACTIVEEVENT gain, state unhandled_event ( self , event ) on_fps_event ( event ) cached Handle FPS events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 @functools . cache def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 unhandled_event ( self , event ) on_game_event ( event ) cached Handle game events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 @functools . cache def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 unhandled_event ( self , event ) on_menu_item_event ( event ) cached Handle menu item events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 @functools . cache def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 unhandled_event ( self , event ) on_quit_event ( event ) cached Handle quit events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 @functools . cache def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # QUIT none unhandled_event ( self , event ) on_sys_wm_event ( event ) cached Handle sys wm events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 @functools . cache def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # SYSWMEVENT unhandled_event ( self , event ) on_user_event ( event ) cached Handle user events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 @functools . cache def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # USEREVENT code unhandled_event ( self , event ) on_video_expose_event ( event ) cached Handle video expose events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 @functools . cache def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEOEXPOSE none unhandled_event ( self , event ) on_video_resize_event ( event ) cached Handle video resize events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 @functools . cache def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEORESIZE size, w, h unhandled_event ( self , event ) GameEvents Bases: EventInterface Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. Source code in glitchygames/events/__init__.py 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 class GameEvents ( EventInterface ): \"\"\"Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. \"\"\" @abc . abstractmethod def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # ACTIVEEVENT gain, state @abc . abstractmethod def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 @abc . abstractmethod def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 @abc . abstractmethod def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 @abc . abstractmethod def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # SYSWMEVENT @abc . abstractmethod def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # USEREVENT code @abc . abstractmethod def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEOEXPOSE none @abc . abstractmethod def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEORESIZE size, w, h @abc . abstractmethod def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_active_event ( event ) abstractmethod Handle active events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 956 957 958 959 960 961 962 963 964 965 @abc . abstractmethod def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_fps_event ( event ) abstractmethod Handle FPS events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 968 969 970 971 972 973 974 975 976 977 @abc . abstractmethod def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_game_event ( event ) abstractmethod Handle game events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 980 981 982 983 984 985 986 987 988 989 @abc . abstractmethod def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_menu_item_event ( event ) abstractmethod Handle menu item events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 992 993 994 995 996 997 998 999 1000 1001 @abc . abstractmethod def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_quit_event ( event ) abstractmethod Handle quit events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 @abc . abstractmethod def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_sys_wm_event ( event ) abstractmethod Handle sys wm events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 @abc . abstractmethod def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_user_event ( event ) abstractmethod Handle user events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 @abc . abstractmethod def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_video_expose_event ( event ) abstractmethod Handle video expose events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 @abc . abstractmethod def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_video_resize_event ( event ) abstractmethod Handle video resize events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 @abc . abstractmethod def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" JoystickEventStubs Bases: EventInterface Mixin for joystick events. Source code in glitchygames/events/__init__.py 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 class JoystickEventStubs ( EventInterface ): \"\"\"Mixin for joystick events.\"\"\" @functools . cache def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYAXISMOTION joy, axis, value unhandled_event ( self , event ) @functools . cache def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONDOWN joy, button unhandled_event ( self , event ) @functools . cache def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONUP joy, button unhandled_event ( self , event ) @functools . cache def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYHATMOTION joy, hat, value unhandled_event ( self , event ) @functools . cache def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBALLMOTION joy, ball, rel unhandled_event ( self , event ) @functools . cache def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEADDED device_index, guid unhandled_event ( self , event ) @functools . cache def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEREMOVED device_index unhandled_event ( self , event ) on_joy_axis_motion_event ( event ) cached Handle joystick axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 @functools . cache def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYAXISMOTION joy, axis, value unhandled_event ( self , event ) on_joy_ball_motion_event ( event ) cached Handle joystick ball motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 @functools . cache def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBALLMOTION joy, ball, rel unhandled_event ( self , event ) on_joy_button_down_event ( event ) cached Handle joystick button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 @functools . cache def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONDOWN joy, button unhandled_event ( self , event ) on_joy_button_up_event ( event ) cached Handle joystick button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 @functools . cache def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONUP joy, button unhandled_event ( self , event ) on_joy_device_added_event ( event ) cached Handle joystick device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 @functools . cache def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEADDED device_index, guid unhandled_event ( self , event ) on_joy_device_removed_event ( event ) cached Handle joystick device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 @functools . cache def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEREMOVED device_index unhandled_event ( self , event ) on_joy_hat_motion_event ( event ) cached Handle joystick hat motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 @functools . cache def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYHATMOTION joy, hat, value unhandled_event ( self , event ) JoystickEvents Bases: EventInterface Mixin for joystick events. Source code in glitchygames/events/__init__.py 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 class JoystickEvents ( EventInterface ): \"\"\"Mixin for joystick events.\"\"\" @abc . abstractmethod def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYAXISMOTION joy, axis, value @abc . abstractmethod def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONDOWN joy, button @abc . abstractmethod def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONUP joy, button @abc . abstractmethod def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYHATMOTION joy, hat, value @abc . abstractmethod def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBALLMOTION joy, ball, rel @abc . abstractmethod def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEADDED device_index, guid @abc . abstractmethod def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_joy_axis_motion_event ( event ) abstractmethod Handle joystick axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 @abc . abstractmethod def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_joy_ball_motion_event ( event ) abstractmethod Handle joystick ball motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 @abc . abstractmethod def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_joy_button_down_event ( event ) abstractmethod Handle joystick button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 @abc . abstractmethod def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_joy_button_up_event ( event ) abstractmethod Handle joystick button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 @abc . abstractmethod def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_joy_device_added_event ( event ) abstractmethod Handle joystick device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 @abc . abstractmethod def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_joy_device_removed_event ( event ) abstractmethod Handle joystick device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 @abc . abstractmethod def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_joy_hat_motion_event ( event ) abstractmethod Handle joystick hat motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 @abc . abstractmethod def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" KeyboardEventStubs Bases: EventInterface Mixin for keyboard events. Source code in glitchygames/events/__init__.py 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 class KeyboardEventStubs ( EventInterface ): \"\"\"Mixin for keyboard events.\"\"\" @functools . cache def on_key_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYDOWN unicode, key, mod unhandled_event ( self , event ) @functools . cache def on_key_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYUP key, mod unhandled_event ( self , event ) @functools . cache def on_key_chord_up_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord up events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys ) @functools . cache def on_key_chord_down_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord down events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys ) on_key_chord_down_event ( event , keys ) cached Handle key chord down events. Parameters: event ( Event ) \u2013 The event to handle. keys ( list ) \u2013 The keys in the chord. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 @functools . cache def on_key_chord_down_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord down events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys ) on_key_chord_up_event ( event , keys ) cached Handle key chord up events. Parameters: event ( Event ) \u2013 The event to handle. keys ( list ) \u2013 The keys in the chord. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 @functools . cache def on_key_chord_up_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord up events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys ) on_key_down_event ( event ) cached Handle key down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 @functools . cache def on_key_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYDOWN unicode, key, mod unhandled_event ( self , event ) on_key_up_event ( event ) cached Handle key up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 @functools . cache def on_key_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYUP key, mod unhandled_event ( self , event ) KeyboardEvents Bases: EventInterface Mixin for keyboard events. Source code in glitchygames/events/__init__.py 1226 1227 class KeyboardEvents ( EventInterface ): \"\"\"Mixin for keyboard events.\"\"\" MidiEventStubs Bases: EventInterface Mixin for midi events. Source code in glitchygames/events/__init__.py 1529 1530 class MidiEventStubs ( EventInterface ): \"\"\"Mixin for midi events.\"\"\" MidiEvents Bases: EventInterface Mixin for midi events. Source code in glitchygames/events/__init__.py 1524 1525 class MidiEvents ( EventInterface ): \"\"\"Mixin for midi events.\"\"\" MouseEventStubs Bases: EventInterface Mixin for mouse events. Source code in glitchygames/events/__init__.py 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 class MouseEventStubs ( EventInterface ): \"\"\"Mixin for mouse events.\"\"\" @functools . cache def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEMOTION pos, rel, buttons unhandled_event ( self , event ) @functools . cache def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , entering_focus ) @functools . cache def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , leaving_focus ) @functools . cache def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONUP pos, button unhandled_event ( self , event ) @functools . cache def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Up pos, button unhandled_event ( self , event ) @functools . cache def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Up pos, button unhandled_event ( self , event ) @functools . cache def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Up pos, button unhandled_event ( self , event ) @functools . cache def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONDOWN pos, button unhandled_event ( self , event ) @functools . cache def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Down pos, button unhandled_event ( self , event ) @functools . cache def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Down pos, button unhandled_event ( self , event ) @functools . cache def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Down pos, button unhandled_event ( self , event ) @functools . cache def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event ) @functools . cache def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event ) @functools . cache def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEWHEEL flipped, y, x, touch, window unhandled_event ( self , event ) on_left_mouse_button_down_event ( event ) cached Handle left mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 @functools . cache def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Down pos, button unhandled_event ( self , event ) on_left_mouse_button_up_event ( event ) cached Handle left mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 @functools . cache def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Up pos, button unhandled_event ( self , event ) on_left_mouse_drag_event ( event , trigger ) cached Handle left mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 @functools . cache def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) on_left_mouse_drop_event ( event , trigger ) cached Handle left mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 @functools . cache def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) on_middle_mouse_button_down_event ( event ) cached Handle middle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 @functools . cache def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Down pos, button unhandled_event ( self , event ) on_middle_mouse_button_up_event ( event ) cached Handle middle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 @functools . cache def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Up pos, button unhandled_event ( self , event ) on_middle_mouse_drag_event ( event , trigger ) cached Handle middle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 @functools . cache def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) on_middle_mouse_drop_event ( event , trigger ) cached Handle middle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 @functools . cache def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) on_mouse_button_down_event ( event ) cached Handle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 @functools . cache def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONDOWN pos, button unhandled_event ( self , event ) on_mouse_button_up_event ( event ) cached Handle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 @functools . cache def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONUP pos, button unhandled_event ( self , event ) on_mouse_drag_event ( event , trigger ) cached Handle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 @functools . cache def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) on_mouse_drop_event ( event , trigger ) cached Handle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 @functools . cache def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) on_mouse_focus_event ( event , entering_focus ) cached Handle mouse focus events. Parameters: event ( Event ) \u2013 The event to handle. entering_focus ( object ) \u2013 The object that is entering focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 @functools . cache def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , entering_focus ) on_mouse_motion_event ( event ) cached Handle mouse motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 @functools . cache def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEMOTION pos, rel, buttons unhandled_event ( self , event ) on_mouse_scroll_down_event ( event ) cached Handle mouse scroll down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 @functools . cache def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event ) on_mouse_scroll_up_event ( event ) cached Handle mouse scroll up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 @functools . cache def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event ) on_mouse_unfocus_event ( event , leaving_focus ) cached Handle mouse unfocus events. Parameters: event ( Event ) \u2013 The event to handle. leaving_focus ( object ) \u2013 The object that is leaving focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 @functools . cache def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , leaving_focus ) on_mouse_wheel_event ( event ) cached Handle mouse wheel events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 @functools . cache def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEWHEEL flipped, y, x, touch, window unhandled_event ( self , event ) on_right_mouse_button_down_event ( event ) cached Handle right mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @functools . cache def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Down pos, button unhandled_event ( self , event ) on_right_mouse_button_up_event ( event ) cached Handle right mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 @functools . cache def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Up pos, button unhandled_event ( self , event ) on_right_mouse_drag_event ( event , trigger ) cached Handle right mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 @functools . cache def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) on_right_mouse_drop_event ( event , trigger ) cached Handle right mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 @functools . cache def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) MouseEvents Bases: EventInterface Mixin for mouse events. Source code in glitchygames/events/__init__.py 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 class MouseEvents ( EventInterface ): \"\"\"Mixin for mouse events.\"\"\" @abc . abstractmethod def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEMOTION pos, rel, buttons @abc . abstractmethod def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONUP pos, button @abc . abstractmethod def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Up pos, button @abc . abstractmethod def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Up pos, button @abc . abstractmethod def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Up pos, button @abc . abstractmethod def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONDOWN pos, button @abc . abstractmethod def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Down pos, button @abc . abstractmethod def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Down pos, button @abc . abstractmethod def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Down pos, button @abc . abstractmethod def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. @abc . abstractmethod def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. @abc . abstractmethod def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_left_mouse_button_down_event ( event ) abstractmethod Handle left mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 @abc . abstractmethod def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_left_mouse_button_up_event ( event ) abstractmethod Handle left mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 @abc . abstractmethod def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_left_mouse_drag_event ( event , trigger ) abstractmethod Handle left mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 @abc . abstractmethod def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" on_left_mouse_drop_event ( event , trigger ) abstractmethod Handle left mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 @abc . abstractmethod def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" on_middle_mouse_button_down_event ( event ) abstractmethod Handle middle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 @abc . abstractmethod def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_middle_mouse_button_up_event ( event ) abstractmethod Handle middle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 @abc . abstractmethod def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_middle_mouse_drag_event ( event , trigger ) abstractmethod Handle middle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 @abc . abstractmethod def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" on_middle_mouse_drop_event ( event , trigger ) abstractmethod Handle middle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 @abc . abstractmethod def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" on_mouse_button_down_event ( event ) abstractmethod Handle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 @abc . abstractmethod def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_mouse_button_up_event ( event ) abstractmethod Handle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 @abc . abstractmethod def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_mouse_drag_event ( event , trigger ) abstractmethod Handle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 @abc . abstractmethod def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" on_mouse_drop_event ( event , trigger ) abstractmethod Handle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 @abc . abstractmethod def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" on_mouse_focus_event ( event , entering_focus ) abstractmethod Handle mouse focus events. Parameters: event ( Event ) \u2013 The event to handle. entering_focus ( object ) \u2013 The object that is entering focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 @abc . abstractmethod def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\" on_mouse_motion_event ( event ) abstractmethod Handle mouse motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 @abc . abstractmethod def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_mouse_scroll_down_event ( event ) abstractmethod Handle mouse scroll down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 @abc . abstractmethod def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_mouse_scroll_up_event ( event ) abstractmethod Handle mouse scroll up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 @abc . abstractmethod def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_mouse_unfocus_event ( event , leaving_focus ) abstractmethod Handle mouse unfocus events. Parameters: event ( Event ) \u2013 The event to handle. leaving_focus ( object ) \u2013 The object that is leaving focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 @abc . abstractmethod def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\" on_mouse_wheel_event ( event ) abstractmethod Handle mouse wheel events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 @abc . abstractmethod def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_right_mouse_button_down_event ( event ) abstractmethod Handle right mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 @abc . abstractmethod def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_right_mouse_button_up_event ( event ) abstractmethod Handle right mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 @abc . abstractmethod def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_right_mouse_drag_event ( event , trigger ) abstractmethod Handle right mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 @abc . abstractmethod def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" on_right_mouse_drop_event ( event , trigger ) abstractmethod Handle right mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 @abc . abstractmethod def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" ResourceManager Singleton aggregator base class for event proxies. A ResourceManager subclass will generally pass all requests through to its proxy object(s), however, for certain types of resources such as joysticks, the subclass will manage things itself. This architecture reduces code footprint, and allows maxium flexibility when needed, at the expense of a bit of abstraction. Unless you're implementing a new pygame event manager, you probably don't need to worry about this. Any subclass of ResourceManager will become a singleton class automatically. This ensures that there is only ever a single manager for any given resource. For instance, a second instantiation of MouseManager would return the same MouseManager object that the GameEngine created to process mouse events with. This behavior allows easy access to resource managers anywhere in the game without needing an explicit copy of the game object, althogh since GameEngine is also a subclass of EventManager, it too is a ResourceManager which can be gotten to from anywhere, since it's a singleton. Source code in glitchygames/events/__init__.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 class ResourceManager : \"\"\"Singleton aggregator base class for event proxies. A ResourceManager subclass will generally pass all requests through to its proxy object(s), however, for certain types of resources such as joysticks, the subclass will manage things itself. This architecture reduces code footprint, and allows maxium flexibility when needed, at the expense of a bit of abstraction. Unless you're implementing a new pygame event manager, you probably don't need to worry about this. Any subclass of ResourceManager will become a singleton class automatically. This ensures that there is only ever a single manager for any given resource. For instance, a second instantiation of MouseManager would return the same MouseManager object that the GameEngine created to process mouse events with. This behavior allows easy access to resource managers anywhere in the game without needing an explicit copy of the game object, althogh since GameEngine is also a subclass of EventManager, it too is a ResourceManager which can be gotten to from anywhere, since it's a singleton. \"\"\" log : logging . Logger = LOG __instances__ : ClassVar = {} def __new__ ( cls : Self , * args , ** kwargs ) -> object : \"\"\"Create a new instance of the class. This method is called when a new instance of the class Args: cls: The class. *args: The positional arguments. **kwargs: The keyword arguments. Returns: The new instance of the class. Raises: AttributeError: If the event is not handled by any proxy. \"\"\" if cls not in cls . __instances__ : cls . __instances__ [ cls ] = object . __new__ ( cls ) LOG . debug ( f 'Created Resource Manager: { cls } ' ) cls . __instances__ [ cls ] . args = args cls . __instances__ [ cls ] . kwargs = kwargs return cls . __instances__ [ cls ] def __init__ ( self : Self , game : object ) -> None : \"\"\"Initialize the resource manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ () self . proxies = [] def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. Raises: AttributeError: If the attribute is not found. \"\"\" # Try each proxy in turn try : for proxy in self . proxies : return getattr ( proxy , attr ) except AttributeError : self . log . exception ( f 'No proxies for { type ( self ) } . { attr } ' ) raise raise AttributeError ( f 'No proxies for { type ( self ) } . { attr } ' ) __getattr__ ( attr ) Get an attribute. This method is called when an attribute is not found. Parameters: attr ( str ) \u2013 The attribute to get. Returns: Callable \u2013 The attribute. Raises: AttributeError \u2013 If the attribute is not found. Source code in glitchygames/events/__init__.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. Raises: AttributeError: If the attribute is not found. \"\"\" # Try each proxy in turn try : for proxy in self . proxies : return getattr ( proxy , attr ) except AttributeError : self . log . exception ( f 'No proxies for { type ( self ) } . { attr } ' ) raise raise AttributeError ( f 'No proxies for { type ( self ) } . { attr } ' ) __init__ ( game ) Initialize the resource manager. Parameters: game ( object ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 228 229 230 231 232 233 234 235 236 237 238 def __init__ ( self : Self , game : object ) -> None : \"\"\"Initialize the resource manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ () self . proxies = [] __new__ ( * args , ** kwargs ) Create a new instance of the class. This method is called when a new instance of the class Parameters: cls ( Self ) \u2013 The class. *args \u2013 The positional arguments. **kwargs \u2013 The keyword arguments. Returns: object \u2013 The new instance of the class. Raises: AttributeError \u2013 If the event is not handled by any proxy. Source code in glitchygames/events/__init__.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def __new__ ( cls : Self , * args , ** kwargs ) -> object : \"\"\"Create a new instance of the class. This method is called when a new instance of the class Args: cls: The class. *args: The positional arguments. **kwargs: The keyword arguments. Returns: The new instance of the class. Raises: AttributeError: If the event is not handled by any proxy. \"\"\" if cls not in cls . __instances__ : cls . __instances__ [ cls ] = object . __new__ ( cls ) LOG . debug ( f 'Created Resource Manager: { cls } ' ) cls . __instances__ [ cls ] . args = args cls . __instances__ [ cls ] . kwargs = kwargs return cls . __instances__ [ cls ] TextEventStubs Bases: EventInterface Mixin for text events. Source code in glitchygames/events/__init__.py 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 class TextEventStubs ( EventInterface ): \"\"\"Mixin for text events.\"\"\" @functools . cache def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTEDITING text, start, length unhandled_event ( self , event ) @functools . cache def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTINPUT text unhandled_event ( self , event ) on_text_editing_event ( event ) cached Handle text editing events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 @functools . cache def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTEDITING text, start, length unhandled_event ( self , event ) on_text_input_event ( event ) cached Handle text input events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 @functools . cache def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTINPUT text unhandled_event ( self , event ) TextEvents Bases: EventInterface Mixin for text events. Source code in glitchygames/events/__init__.py 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 class TextEvents ( EventInterface ): \"\"\"Mixin for text events.\"\"\" @abc . abstractmethod def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTEDITING text, start, length @abc . abstractmethod def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_text_editing_event ( event ) abstractmethod Handle text editing events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 @abc . abstractmethod def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_text_input_event ( event ) abstractmethod Handle text input events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 @abc . abstractmethod def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" TouchEventStubs Bases: EventInterface Mixin for touch events. Source code in glitchygames/events/__init__.py 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 class TouchEventStubs ( EventInterface ): \"\"\"Mixin for touch events.\"\"\" @functools . cache def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\" # FINGERDOWN finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\" # FINGERMOTION finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\" # FINGERUP finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERDOWN touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERMOTION touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERUP touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) on_multi_touch_down_event ( event ) cached Handle multi finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 901 902 903 904 905 906 907 908 909 910 911 912 @functools . cache def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERDOWN touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) on_multi_touch_motion_event ( event ) cached Handle multi finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 914 915 916 917 918 919 920 921 922 923 924 925 @functools . cache def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERMOTION touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) on_multi_touch_up_event ( event ) cached Handle multi finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 927 928 929 930 931 932 933 934 935 936 937 938 @functools . cache def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERUP touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) on_touch_down_event ( event ) cached Handle finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 862 863 864 865 866 867 868 869 870 871 872 873 @functools . cache def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\" # FINGERDOWN finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) on_touch_motion_event ( event ) cached Handle finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 875 876 877 878 879 880 881 882 883 884 885 886 @functools . cache def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\" # FINGERMOTION finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) on_touch_up_event ( event ) cached Handle finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 888 889 890 891 892 893 894 895 896 897 898 899 @functools . cache def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\" # FINGERUP finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) TouchEvents Bases: EventInterface Mixin for touch events. Source code in glitchygames/events/__init__.py 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 class TouchEvents ( EventInterface ): \"\"\"Mixin for touch events.\"\"\" @abc . abstractmethod def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\" # FINGERDOWN finger_id, x, y, dx, dy, pressure @abc . abstractmethod def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\" # FINGERMOTION finger_id, x, y, dx, dy, pressure @abc . abstractmethod def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\" # FINGERUP finger_id, x, y, dx, dy, pressure @abc . abstractmethod def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERDOWN touch_id, x, y, dx, dy, pressure @abc . abstractmethod def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERMOTION touch_id, x, y, dx, dy, pressure @abc . abstractmethod def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\" on_multi_touch_down_event ( event ) abstractmethod Handle multi finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 822 823 824 825 826 827 828 829 830 831 @abc . abstractmethod def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\" on_multi_touch_motion_event ( event ) abstractmethod Handle multi finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 834 835 836 837 838 839 840 841 842 843 @abc . abstractmethod def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\" on_multi_touch_up_event ( event ) abstractmethod Handle multi finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 846 847 848 849 850 851 852 853 854 855 @abc . abstractmethod def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\" on_touch_down_event ( event ) abstractmethod Handle finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 786 787 788 789 790 791 792 793 794 795 @abc . abstractmethod def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\" on_touch_motion_event ( event ) abstractmethod Handle finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 798 799 800 801 802 803 804 805 806 807 @abc . abstractmethod def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\" on_touch_up_event ( event ) abstractmethod Handle finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 810 811 812 813 814 815 816 817 818 819 @abc . abstractmethod def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\" WindowEventStubs Bases: EventInterface Mixin for window events. Source code in glitchygames/events/__init__.py 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 class WindowEventStubs ( EventInterface ): \"\"\"Mixin for window events.\"\"\" @functools . cache def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWCLOSE none unhandled_event ( self , event ) @functools . cache def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWENTER none unhandled_event ( self , event ) @functools . cache def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWEXPOSED none unhandled_event ( self , event ) @functools . cache def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSGAINED none unhandled_event ( self , event ) @functools . cache def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSLOST none unhandled_event ( self , event ) @functools . cache def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHIDDEN none unhandled_event ( self , event ) @functools . cache def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHITTEST none unhandled_event ( self , event ) @functools . cache def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWLEAVE none unhandled_event ( self , event ) @functools . cache def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMAXIMIZED none unhandled_event ( self , event ) @functools . cache def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMINIMIZED none unhandled_event ( self , event ) @functools . cache def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMOVED none unhandled_event ( self , event ) @functools . cache def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESIZED size, w, h unhandled_event ( self , event ) @functools . cache def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESTORED none unhandled_event ( self , event ) @functools . cache def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSHOWN none unhandled_event ( self , event ) @functools . cache def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSIZECHANGED size, w, h unhandled_event ( self , event ) @functools . cache def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWTAKEFOCUS none unhandled_event ( self , event ) on_window_close_event ( event ) cached Handle window close events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 @functools . cache def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWCLOSE none unhandled_event ( self , event ) on_window_enter_event ( event ) cached Handle window enter events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 @functools . cache def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWENTER none unhandled_event ( self , event ) on_window_exposed_event ( event ) cached Handle window exposed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 @functools . cache def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWEXPOSED none unhandled_event ( self , event ) on_window_focus_gained_event ( event ) cached Handle window focus gained events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 @functools . cache def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSGAINED none unhandled_event ( self , event ) on_window_focus_lost_event ( event ) cached Handle window focus lost events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 @functools . cache def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSLOST none unhandled_event ( self , event ) on_window_hidden_event ( event ) cached Handle window hidden events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 @functools . cache def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHIDDEN none unhandled_event ( self , event ) on_window_hit_test_event ( event ) cached Handle window hit test events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 @functools . cache def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHITTEST none unhandled_event ( self , event ) on_window_leave_event ( event ) cached Handle window leave events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 @functools . cache def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWLEAVE none unhandled_event ( self , event ) on_window_maximized_event ( event ) cached Handle window maximized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 @functools . cache def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMAXIMIZED none unhandled_event ( self , event ) on_window_minimized_event ( event ) cached Handle window minimized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 @functools . cache def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMINIMIZED none unhandled_event ( self , event ) on_window_moved_event ( event ) cached Handle window moved events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 @functools . cache def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMOVED none unhandled_event ( self , event ) on_window_resized_event ( event ) cached Handle window resized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 @functools . cache def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESIZED size, w, h unhandled_event ( self , event ) on_window_restored_event ( event ) cached Handle window restored events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 @functools . cache def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESTORED none unhandled_event ( self , event ) on_window_shown_event ( event ) cached Handle window shown events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 @functools . cache def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSHOWN none unhandled_event ( self , event ) on_window_size_changed_event ( event ) cached Handle window size changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 @functools . cache def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSIZECHANGED size, w, h unhandled_event ( self , event ) on_window_take_focus_event ( event ) cached Handle window take focus events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 @functools . cache def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWTAKEFOCUS none unhandled_event ( self , event ) WindowEvents Bases: EventInterface Mixin for window events. Source code in glitchygames/events/__init__.py 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 class WindowEvents ( EventInterface ): \"\"\"Mixin for window events.\"\"\" @abc . abstractmethod def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWCLOSE none @abc . abstractmethod def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWENTER none @abc . abstractmethod def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWEXPOSED none @abc . abstractmethod def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSGAINED none @abc . abstractmethod def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSLOST none @abc . abstractmethod def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHIDDEN none @abc . abstractmethod def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHITTEST none @abc . abstractmethod def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWLEAVE none @abc . abstractmethod def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMAXIMIZED none @abc . abstractmethod def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMINIMIZED none @abc . abstractmethod def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMOVED none @abc . abstractmethod def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESIZED size, w, h @abc . abstractmethod def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESTORED none @abc . abstractmethod def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSHOWN none @abc . abstractmethod def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSIZECHANGED size, w, h @abc . abstractmethod def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_close_event ( event ) abstractmethod Handle window close events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 @abc . abstractmethod def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_enter_event ( event ) abstractmethod Handle window enter events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 @abc . abstractmethod def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_exposed_event ( event ) abstractmethod Handle window exposed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 @abc . abstractmethod def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_focus_gained_event ( event ) abstractmethod Handle window focus gained events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 @abc . abstractmethod def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_focus_lost_event ( event ) abstractmethod Handle window focus lost events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 @abc . abstractmethod def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_hidden_event ( event ) abstractmethod Handle window hidden events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 @abc . abstractmethod def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_hit_test_event ( event ) abstractmethod Handle window hit test events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 @abc . abstractmethod def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_leave_event ( event ) abstractmethod Handle window leave events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 @abc . abstractmethod def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_maximized_event ( event ) abstractmethod Handle window maximized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 @abc . abstractmethod def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_minimized_event ( event ) abstractmethod Handle window minimized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 @abc . abstractmethod def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_moved_event ( event ) abstractmethod Handle window moved events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 @abc . abstractmethod def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_resized_event ( event ) abstractmethod Handle window resized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 @abc . abstractmethod def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_restored_event ( event ) abstractmethod Handle window restored events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 @abc . abstractmethod def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_shown_event ( event ) abstractmethod Handle window shown events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 @abc . abstractmethod def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_size_changed_event ( event ) abstractmethod Handle window size changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 @abc . abstractmethod def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" on_window_take_focus_event ( event ) abstractmethod Handle window take focus events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 @abc . abstractmethod def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" supported_events ( like = '.*' ) Return a list of supported events. This method is crucial for allowing the game engine to support both older versions of pygame and newer versions. It allows us to enumerate supported pygame events and initialize them dynamically. This ensures that the game engine will work with many versions of pygame. We enumerate all pygame event IDs and then use the pygame.event.event_name() method to get the event name. We then use a regular expression to match the event name against the like parameter. Parameters: like ( str , default: '.*' ) \u2013 A regular expression to match against the event names. Returns: list \u2013 A list of pygame events whose names match the regular expression. Source code in glitchygames/events/__init__.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def supported_events ( like : str = '.*' ) -> list : \"\"\"Return a list of supported events. This method is crucial for allowing the game engine to support both older versions of pygame and newer versions. It allows us to enumerate supported pygame events and initialize them dynamically. This ensures that the game engine will work with many versions of pygame. We enumerate all pygame event IDs and then use the pygame.event.event_name() method to get the event name. We then use a regular expression to match the event name against the like parameter. Args: like: A regular expression to match against the event names. Returns: A list of pygame events whose names match the regular expression. \"\"\" # Get a list of all of the events # by name, but ignore duplicates. event_names = ( pygame . event . event_name ( event_num ) for event_num in range ( pygame . NUMEVENTS ) ) event_names : set [ str ] = set ( event_names ) - set ( 'Unknown' ) # Pygame 2.5.1 and maybe others have a bug where the event name lookup # is wrong. # # The error is: # # AttributeError: module 'pygame' has no attribute 'CONTROLLERDEVICEMAPPED'. # Did you mean: 'CONTROLLERDEVICEREMAPPED'? # # This is a workaround for that. # # The controller documentation also indicates that it should be CONTROLLERDEVICEREMAPPED patched_event_names = { 'APPDIDENTERBACKGROUND' : 'APP_DIDENTERBACKGROUND' , 'APPDIDENTERFOREGROUND' : 'APP_DIDENTERFOREGROUND' , 'APPLOWMEMORY' : 'APP_LOWMEMORY' , 'APPWILLENTERBACKGROUND' : 'APP_WILLENTERBACKGROUND' , 'APPWILLENTERFOREGROUND' : 'APP_WILLENTERFOREGROUND' , 'APPTERMINATING' : 'APP_TERMINATING' , 'CONTROLLERDEVICEMAPPED' : 'CONTROLLERDEVICEREMAPPED' , 'RENDERDEVICERESET' : 'RENDER_DEVICE_RESET' , 'RENDERTARGETSRESET' : 'RENDER_TARGETS_RESET' , 'UNKNOWN' : 'K_UNKNOWN' } event_list = [] for event_name in list ( event_names ): # If there's a patched event name, use it, otherwise use event_name # # This works around a pygame bug for CONTROLLERDEVICEREMAPPED patched_event_name = patched_event_names . get ( event_name . upper (), event_name ) LOG . info ( f 'Adding Event: { patched_event_name } ' ) if re . match ( like , patched_event_name . upper ()): event_list . append ( getattr ( pygame , patched_event_name . upper ())) return event_list unhandled_event ( game , event , * args , ** kwargs ) cached Handle unhandled events. This method is called when an event is not handled by any of the event handlers. This is helpful for us to debug events that we haven't implemented yet. Parameters: *args \u2013 The positional arguments. **kwargs \u2013 The keyword arguments. Returns: NoReturn \u2013 None Raises: AttributeError \u2013 If the event is not handled. Source code in glitchygames/events/__init__.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 @dump_cache_info @functools . cache def unhandled_event ( game , event , * args , ** kwargs ) -> NoReturn : \"\"\"Handle unhandled events. This method is called when an event is not handled by any of the event handlers. This is helpful for us to debug events that we haven't implemented yet. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None Raises: AttributeError: If the event is not handled. \"\"\" if game . options [ 'debug_events' ]: LOG . error ( f 'Unhandled Event: args: { pygame . event . event_name ( event . type ) } { event } { args } { kwargs } ' ) elif game . options [ 'no_unhandled_events' ]: raise AttributeError ( f 'Unhandled Event: args: { pygame . event . event_name ( event . type ) } { event } { args } { kwargs } ' ) Contains GameEngine and helper classes for building a game. GameEngine Bases: EventManager Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. Source code in glitchygames/engine.pyclass GameEngine ( events . EventManager ): \"\"\"Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. \"\"\" log : logging . Logger = LOG game : object = None try : icon : pygame . Surface = pygame . image . load ( Path ( ASSET_PATH ) / 'glitch.png' ) except FileNotFoundError : icon = None NAME : Literal [ 'Boilerplate Adventures' ] = 'Boilerplate Adventures' VERSION : Literal [ '1.0' ] = '1.0' OPTIONS : ClassVar = None LAST_EVENT_MISS : ClassVar = None MISSING_EVENTS : ClassVar = [] UNIMPLEMENTED_EVENTS : ClassVar = [] USE_FASTEVENTS : ClassVar = False # We add a layer of encapsulation here to simplify # the processing of events. New event types added # to the events module need to be accounted for here # if they're not already handled # # These are wired up at the end of __init__() EVENT_HANDLERS : ClassVar = { } def __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info () def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags ) def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers () def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' ) @property def screen_width ( self : Self ) -> int : \"\"\"Get the screen width. Args: None Returns: int: The screen width. \"\"\" return self . screen . get_width () @property def screen_height ( self : Self ) -> int : \"\"\"Get the screen height. Args: None Returns: int: The screen height. \"\"\" return self . screen . get_height () def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' ) def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' ) def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height )) @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' ) @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats () @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) ) def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type ) def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' ) def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' ) def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 ) # If the game hasn't hooked a call, we should check if the scene manager has. # # This will allow scenes to get pygame events directly, but we can still # hook those events in this engine, or in the subclassed game object, too. # # This allows maximum flexibility of event processing, with low overhead # at the expense of a slight layer violation. def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" ) screen_height : int property Get the screen height. Returns: int ( int ) \u2013 The screen height. screen_width : int property Get the screen width. Returns: int ( int ) \u2013 The screen width. __del__ () Delete the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' ) __getattr__ ( attr ) Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Parameters: attr ( str ) \u2013 The attribute to proxy. Returns: Callable ( Callable ) \u2013 The callable object. Source code in glitchygames/engine.py 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" ) __init__ ( game , icon = None ) Initialize the game engine. Parameters: game ( object ) \u2013 The game instance. icon ( Surface | Path | str , default: None ) \u2013 The game icon. Returns: None \u2013 None Source code in glitchygames/engine.pydef __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info () args ( parser ) classmethod Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser initialize_display () Initialize the display. Returns: None \u2013 None Source code in glitchygames/engine.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags ) initialize_event_handlers () Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Returns: None \u2013 None Source code in glitchygames/engine.py 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers () initialize_input_event_handlers () Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Returns: None \u2013 None Source code in glitchygames/engine.py 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event initialize_system_icons () Initialize system icons. Returns: None \u2013 None Source code in glitchygames/engine.py 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' ) missing_event ( * args , ** kwargs ) Suppress unhandled on_*_event methods. We only want to log this once per event type. Parameters: *args \u2013 The args. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 ) post_game_event ( event_subtype , event_data ) Post a game event. Parameters: event_subtype ( EventType ) \u2013 The event subtype. event_data ( dict ) \u2013 The event data. Returns: None \u2013 None Source code in glitchygames/engine.py 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' ) print_game_info () Print game information. Returns: None \u2013 None Source code in glitchygames/engine.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' ) print_system_info () Print system information. Returns: None \u2013 None Source code in glitchygames/engine.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' ) process_audio_event ( event ) Process an audio event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False process_controller_event ( event ) Process a controller event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False process_drop_event ( event ) Process a drop event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False process_events () Process events. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled process_game_event ( event ) Process a game event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False process_joystick_event ( event ) Process a joystick event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False process_keyboard_event ( event ) Process a keyboard event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False process_midi_event ( event ) Process a midi event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False process_mouse_event ( event ) Process a mouse event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False process_text_event ( event ) Process a text event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False process_touch_event ( event ) Process a touch event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False process_unimplemented_event ( event ) Process an unimplemented event. Parameters: event ( Event ) \u2013 The event. Returns: None \u2013 None Source code in glitchygames/engine.py 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type ) process_window_event ( event ) Process a window event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False process_window_focus_event ( event ) Process a window focus event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False quit_game () classmethod Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Returns: None \u2013 None Source code in glitchygames/engine.py 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) ) register_game_event ( event_type , callback ) Register a game event. Parameters: event_type ( EventType ) \u2013 The event type. callback ( Callable ) \u2013 The callback. Returns: None \u2013 None Source code in glitchygames/engine.py 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback set_cursor ( cursor , cursor_black = '.' , cursor_white = 'X' , cursor_xor = 'o' ) classmethod Set the cursor. Parameters: cursor ( list [ str ] ) \u2013 The cursor. cursor_black ( str , default: '.' ) \u2013 The black cursor. cursor_white ( str , default: 'X' ) \u2013 The white cursor. cursor_xor ( str , default: 'o' ) \u2013 The xor cursor. Returns: list [ str ] \u2013 list[str]: The cursor. Source code in glitchygames/engine.py 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor start () Start the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats () suggested_resolution ( desired_width = 0 , desired_height = 0 ) Suggest a resolution. Parameters: desired_width ( int , default: 0 ) \u2013 The desired width. desired_height ( int , default: 0 ) \u2013 The desired height. Returns: tuple [ int , int ] \u2013 tuple[int, int]: The suggested resolution. Source code in glitchygames/engine.py 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height )) suppress_event ( * args , attr , ** kwargs ) Suppress an event. Parameters: *args \u2013 The args. attr ( str ) \u2013 The attribute. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' ) GameManager Bases: ResourceManager Game event manager. Source code in glitchygames/engine.pyclass GameManager ( events . ResourceManager ): \"\"\"Game event manager.\"\"\" log : logging . Logger = LOG class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )] @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser GameProxy Bases: ResourceManager Game event proxy. Source code in glitchygames/engine.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) __init__ ( ** kwargs ) Initialize the game proxy. Parameters: **kwargs \u2013 Keyword arguments. Returns: None \u2013 None Source code in glitchygames/engine.py 58 59 60 61 62 63 64 65 66 67 68 69 def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] on_active_event ( event ) Handle active event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 71 72 73 74 75 76 77 78 79 80 81 def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) on_fps_event ( event ) Handle fps event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 83 84 85 86 87 88 89 90 91 92 93 def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) on_game_event ( event ) Handle game event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 95 96 97 98 99 100 101 102 103 104 105 def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) on_menu_item_event ( event ) Handle menu item event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 107 108 109 110 111 112 113 114 115 116 117 def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) on_quit_event ( event ) Handle quit event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 167 168 169 170 171 172 173 174 175 176 177 def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) on_sys_wm_event ( event ) Handle sys wm event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 119 120 121 122 123 124 125 126 127 128 129 def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) on_user_event ( event ) Handle user event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 131 132 133 134 135 136 137 138 139 140 141 def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) on_video_expose_event ( event ) Handle video expose event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 143 144 145 146 147 148 149 150 151 152 153 def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) on_video_resize_event ( event ) Handle video resize event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 155 156 157 158 159 160 161 162 163 164 165 def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) __init__ ( game = None ) Initialize the game event manager. Parameters: game ( object , default: None ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/engine.py 179 180 181 182 183 184 185 186 187 188 189 def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )] args ( parser ) classmethod Add arguments to the argument parser. Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#reference","text":"Glitchy Games event module. This module contains the event substrate for handling higher level events in the game engine. Many events are 1:1 with pygame events, but some are synthesized. For example, a mouse drop event is a synthesized event that is triggered by a mouse button down event followed by a mouse motion event followed by a mouse button up event.","title":"Reference"},{"location":"#glitchygames.events.AllEventStubs","text":"Bases: AudioEventStubs , ControllerEventStubs , DropEventStubs , TouchEventStubs , FontEventStubs , GameEventStubs , JoystickEventStubs , KeyboardEventStubs , MidiEventStubs , MouseEventStubs , TextEventStubs , WindowEventStubs Mixin for all event stubs. Source code in glitchygames/events/__init__.py 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 class AllEventStubs ( AudioEventStubs , ControllerEventStubs , DropEventStubs , TouchEventStubs , FontEventStubs , GameEventStubs , JoystickEventStubs , KeyboardEventStubs , MidiEventStubs , MouseEventStubs , TextEventStubs , WindowEventStubs ): \"\"\"Mixin for all event stubs.\"\"\"","title":"AllEventStubs"},{"location":"#glitchygames.events.AllEvents","text":"Bases: AudioEvents , ControllerEvents , DropEvents , TouchEvents , FontEvents , GameEvents , JoystickEvents , KeyboardEvents , MidiEvents , MouseEvents , TextEvents , WindowEvents Mixin for all events. Source code in glitchygames/events/__init__.py 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 class AllEvents ( AudioEvents , ControllerEvents , DropEvents , TouchEvents , FontEvents , GameEvents , JoystickEvents , KeyboardEvents , MidiEvents , MouseEvents , TextEvents , WindowEvents ): \"\"\"Mixin for all events.\"\"\"","title":"AllEvents"},{"location":"#glitchygames.events.AudioEventStubs","text":"Bases: AudioEvents Mixin for audio events. Source code in glitchygames/events/__init__.py 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 class AudioEventStubs ( AudioEvents ): \"\"\"Mixin for audio events.\"\"\" @functools . cache def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEADDED which, iscapture return unhandled_event ( self , event ) @functools . cache def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEREMOVED which, iscapture return unhandled_event ( self , event )","title":"AudioEventStubs"},{"location":"#glitchygames.events.AudioEventStubs.on_audio_device_added_event","text":"Handle audio device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 408 409 410 411 412 413 414 415 416 417 418 419 @functools . cache def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEADDED which, iscapture return unhandled_event ( self , event )","title":"on_audio_device_added_event"},{"location":"#glitchygames.events.AudioEventStubs.on_audio_device_removed_event","text":"Handle audio device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 421 422 423 424 425 426 427 428 429 430 431 432 @functools . cache def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEREMOVED which, iscapture return unhandled_event ( self , event )","title":"on_audio_device_removed_event"},{"location":"#glitchygames.events.AudioEvents","text":"Bases: EventInterface Mixin for audio events. Source code in glitchygames/events/__init__.py 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 class AudioEvents ( EventInterface ): \"\"\"Mixin for audio events.\"\"\" @abc . abstractmethod def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # AUDIODEVICEADDED which, iscapture @abc . abstractmethod def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"AudioEvents"},{"location":"#glitchygames.events.AudioEvents.on_audio_device_added_event","text":"Handle audio device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 380 381 382 383 384 385 386 387 388 389 @abc . abstractmethod def on_audio_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_audio_device_added_event"},{"location":"#glitchygames.events.AudioEvents.on_audio_device_removed_event","text":"Handle audio device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 392 393 394 395 396 397 398 399 400 401 @abc . abstractmethod def on_audio_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle audio device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_audio_device_removed_event"},{"location":"#glitchygames.events.ControllerEventStubs","text":"Bases: ControllerEvents Mixin for controller events. Source code in glitchygames/events/__init__.py 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 class ControllerEventStubs ( ControllerEvents ): \"\"\"Mixin for controller events.\"\"\" @functools . cache def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERAXISMOTION joy, axis, value unhandled_event ( self , event ) @functools . cache def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONDOWN joy, button unhandled_event ( self , event ) @functools . cache def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONUP joy, button unhandled_event ( self , event ) @functools . cache def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEADDED device_index, guid unhandled_event ( self , event ) @functools . cache def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMAPPED device_index unhandled_event ( self , event ) @functools . cache def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMOVED device_index unhandled_event ( self , event ) @functools . cache def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADDOWN joy, touchpad unhandled_event ( self , event ) @functools . cache def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADMOTION joy, touchpad unhandled_event ( self , event ) @functools . cache def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADUP joy, touchpad unhandled_event ( self , event )","title":"ControllerEventStubs"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_axis_motion_event","text":"Handle controller axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 556 557 558 559 560 561 562 563 564 565 566 567 @functools . cache def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERAXISMOTION joy, axis, value unhandled_event ( self , event )","title":"on_controller_axis_motion_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_button_down_event","text":"Handle controller button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 569 570 571 572 573 574 575 576 577 578 579 580 @functools . cache def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONDOWN joy, button unhandled_event ( self , event )","title":"on_controller_button_down_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_button_up_event","text":"Handle controller button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 582 583 584 585 586 587 588 589 590 591 592 593 @functools . cache def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONUP joy, button unhandled_event ( self , event )","title":"on_controller_button_up_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_device_added_event","text":"Handle controller device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 595 596 597 598 599 600 601 602 603 604 605 606 @functools . cache def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEADDED device_index, guid unhandled_event ( self , event )","title":"on_controller_device_added_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_device_remapped_event","text":"Handle controller device remapped events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 608 609 610 611 612 613 614 615 616 617 618 619 @functools . cache def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMAPPED device_index unhandled_event ( self , event )","title":"on_controller_device_remapped_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_device_removed_event","text":"Handle controller device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 621 622 623 624 625 626 627 628 629 630 631 632 @functools . cache def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMOVED device_index unhandled_event ( self , event )","title":"on_controller_device_removed_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_touchpad_down_event","text":"Handle controller touchpad down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 634 635 636 637 638 639 640 641 642 643 644 645 @functools . cache def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADDOWN joy, touchpad unhandled_event ( self , event )","title":"on_controller_touchpad_down_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_touchpad_motion_event","text":"Handle controller touchpad motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 647 648 649 650 651 652 653 654 655 656 657 658 @functools . cache def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADMOTION joy, touchpad unhandled_event ( self , event )","title":"on_controller_touchpad_motion_event"},{"location":"#glitchygames.events.ControllerEventStubs.on_controller_touchpad_up_event","text":"Handle controller touchpad up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 660 661 662 663 664 665 666 667 668 669 670 671 @functools . cache def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADUP joy, touchpad unhandled_event ( self , event )","title":"on_controller_touchpad_up_event"},{"location":"#glitchygames.events.ControllerEvents","text":"Bases: EventInterface Mixin for controller events. Source code in glitchygames/events/__init__.py 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 class ControllerEvents ( EventInterface ): \"\"\"Mixin for controller events.\"\"\" @abc . abstractmethod def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERAXISMOTION joy, axis, value @abc . abstractmethod def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONDOWN joy, button @abc . abstractmethod def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERBUTTONUP joy, button @abc . abstractmethod def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEADDED device_index, guid @abc . abstractmethod def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMAPPED device_index @abc . abstractmethod def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERDEVICEREMOVED device_index @abc . abstractmethod def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADDOWN joy, touchpad @abc . abstractmethod def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # CONTROLLERTOUCHPADMOTION joy, touchpad @abc . abstractmethod def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"ControllerEvents"},{"location":"#glitchygames.events.ControllerEvents.on_controller_axis_motion_event","text":"Handle controller axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 446 447 448 449 450 451 452 453 454 455 @abc . abstractmethod def on_controller_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_axis_motion_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_button_down_event","text":"Handle controller button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 458 459 460 461 462 463 464 465 466 467 @abc . abstractmethod def on_controller_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_button_down_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_button_up_event","text":"Handle controller button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 470 471 472 473 474 475 476 477 478 479 @abc . abstractmethod def on_controller_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_button_up_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_device_added_event","text":"Handle controller device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 482 483 484 485 486 487 488 489 490 491 @abc . abstractmethod def on_controller_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_device_added_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_device_remapped_event","text":"Handle controller device remapped events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 494 495 496 497 498 499 500 501 502 503 @abc . abstractmethod def on_controller_device_remapped_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device remapped events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_device_remapped_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_device_removed_event","text":"Handle controller device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 506 507 508 509 510 511 512 513 514 515 @abc . abstractmethod def on_controller_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_device_removed_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_touchpad_down_event","text":"Handle controller touchpad down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 518 519 520 521 522 523 524 525 526 527 @abc . abstractmethod def on_controller_touchpad_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_touchpad_down_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_touchpad_motion_event","text":"Handle controller touchpad motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 530 531 532 533 534 535 536 537 538 539 @abc . abstractmethod def on_controller_touchpad_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_touchpad_motion_event"},{"location":"#glitchygames.events.ControllerEvents.on_controller_touchpad_up_event","text":"Handle controller touchpad up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 542 543 544 545 546 547 548 549 550 551 @abc . abstractmethod def on_controller_touchpad_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle controller touchpad up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_controller_touchpad_up_event"},{"location":"#glitchygames.events.DropEventStubs","text":"Bases: EventInterface Mixin for drop events. Source code in glitchygames/events/__init__.py 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 class DropEventStubs ( EventInterface ): \"\"\"Mixin for drop events.\"\"\" @functools . cache def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\" # DROPBEGIN none unhandled_event ( self , event ) @functools . cache def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\" # DROPFILE file unhandled_event ( self , event ) @functools . cache def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\" # DROPTEXT text unhandled_event ( self , event ) @functools . cache def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\" # DROPCOMPLETE none unhandled_event ( self , event )","title":"DropEventStubs"},{"location":"#glitchygames.events.DropEventStubs.on_drop_begin_event","text":"Handle drop begin event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 730 731 732 733 734 735 736 737 738 739 740 741 @functools . cache def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\" # DROPBEGIN none unhandled_event ( self , event )","title":"on_drop_begin_event"},{"location":"#glitchygames.events.DropEventStubs.on_drop_complete_event","text":"Handle drop complete event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 769 770 771 772 773 774 775 776 777 778 779 780 @functools . cache def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\" # DROPCOMPLETE none unhandled_event ( self , event )","title":"on_drop_complete_event"},{"location":"#glitchygames.events.DropEventStubs.on_drop_file_event","text":"Handle drop file event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 743 744 745 746 747 748 749 750 751 752 753 754 @functools . cache def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\" # DROPFILE file unhandled_event ( self , event )","title":"on_drop_file_event"},{"location":"#glitchygames.events.DropEventStubs.on_drop_text_event","text":"Handle drop text event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 756 757 758 759 760 761 762 763 764 765 766 767 @functools . cache def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\" # DROPTEXT text unhandled_event ( self , event )","title":"on_drop_text_event"},{"location":"#glitchygames.events.DropEvents","text":"Bases: EventInterface Mixin for drop events. Source code in glitchygames/events/__init__.py 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 class DropEvents ( EventInterface ): \"\"\"Mixin for drop events.\"\"\" @abc . abstractmethod def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\" # DROPBEGIN none @abc . abstractmethod def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\" # DROPFILE file @abc . abstractmethod def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\" # DROPTEXT text @abc . abstractmethod def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\"","title":"DropEvents"},{"location":"#glitchygames.events.DropEvents.on_drop_begin_event","text":"Handle drop begin event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 678 679 680 681 682 683 684 685 686 687 @abc . abstractmethod def on_drop_begin_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop begin event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_drop_begin_event"},{"location":"#glitchygames.events.DropEvents.on_drop_complete_event","text":"Handle drop complete event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 714 715 716 717 718 719 720 721 722 723 @abc . abstractmethod def on_drop_complete_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop complete event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_drop_complete_event"},{"location":"#glitchygames.events.DropEvents.on_drop_file_event","text":"Handle drop file event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 690 691 692 693 694 695 696 697 698 699 @abc . abstractmethod def on_drop_file_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop file event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_drop_file_event"},{"location":"#glitchygames.events.DropEvents.on_drop_text_event","text":"Handle drop text event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 702 703 704 705 706 707 708 709 710 711 @abc . abstractmethod def on_drop_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle drop text event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_drop_text_event"},{"location":"#glitchygames.events.EventInterface","text":"Abstract base class for event interfaces. Source code in glitchygames/events/__init__.py 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 class EventInterface ( metaclass = abc . ABCMeta ): # noqa: B024 \"\"\"Abstract base class for event interfaces.\"\"\" @classmethod def __subclasshook__ ( cls : Self , subclass : object ) -> bool : \"\"\"Override the default __subclasshook__ to create an interface.\"\"\" # Note: This accounts for under/dunder methods in addition to regular methods. interface_attributes = set ( cls . __abstractmethods__ ) subclass_attributes = set ( subclass . __abstractmethods__ ) interface_is_implemented = False methods = [] for attribute in sorted ( interface_attributes ): if hasattr ( subclass , attribute ) and attribute not in subclass_attributes : if callable ( getattr ( subclass , attribute )): cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (callable)' ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (attribute))' ) methods . append ( True ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u274c (unimplemented)' ) methods . append ( False ) # all([]) returns True, so mask it # # This protects against an empty attribute list # which would be a misconfiguration of the interface if len ( methods ) and all ( methods ): interface_is_implemented = all ( methods ) return interface_is_implemented","title":"EventInterface"},{"location":"#glitchygames.events.EventInterface.__subclasshook__","text":"Override the default subclasshook to create an interface. Source code in glitchygames/events/__init__.py 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 @classmethod def __subclasshook__ ( cls : Self , subclass : object ) -> bool : \"\"\"Override the default __subclasshook__ to create an interface.\"\"\" # Note: This accounts for under/dunder methods in addition to regular methods. interface_attributes = set ( cls . __abstractmethods__ ) subclass_attributes = set ( subclass . __abstractmethods__ ) interface_is_implemented = False methods = [] for attribute in sorted ( interface_attributes ): if hasattr ( subclass , attribute ) and attribute not in subclass_attributes : if callable ( getattr ( subclass , attribute )): cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (callable)' ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u2705 (attribute))' ) methods . append ( True ) else : cls . log . info ( f ' { subclass . __name__ } . { attribute } -> \u274c (unimplemented)' ) methods . append ( False ) # all([]) returns True, so mask it # # This protects against an empty attribute list # which would be a misconfiguration of the interface if len ( methods ) and all ( methods ): interface_is_implemented = all ( methods ) return interface_is_implemented","title":"__subclasshook__"},{"location":"#glitchygames.events.EventManager","text":"Bases: ResourceManager Root event manager. Source code in glitchygames/events/__init__.py 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 class EventManager ( ResourceManager ): \"\"\"Root event manager.\"\"\" log : logging . Logger = LOG # Interiting from object is default in Python 3. # Linters complain if you do it. # # This isn't a ResourceManager like other proxies, because # it's the fallthrough event object, so we don't have a proxy. class EventProxy : \"\"\"Proxy for events.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , event_source : object ) -> None : \"\"\"Initialize the event proxy. Args: event_source: The event source. Returns: None \"\"\" super () . __init__ () # No proxies for the root class. self . proxies = [] # This is used for leave objects which # don't have their own proxies. # # Subclassed managers that set their own proxy # will not have this. self . event_source = event_source def unhandled_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Handle unhandled events. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None \"\"\" # inspect.stack()[1] is the call frame above us, so this should be reasonable. event_handler = inspect . stack ()[ 1 ] . function event = kwargs . get ( 'event' ) event_trigger = kwargs . get ( 'trigger' , None ) self . log . debug ( f 'Unhandled Event { event_handler } : ' f ' { self . event_source } -> { event } Event Trigger: { event_trigger } ' ) def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. \"\"\" return self . unhandled_event def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game ) self . proxies = [ EventManager . EventProxy ( event_source = self )]","title":"EventManager"},{"location":"#glitchygames.events.EventManager.EventProxy","text":"Proxy for events. Source code in glitchygames/events/__init__.py 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 class EventProxy : \"\"\"Proxy for events.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , event_source : object ) -> None : \"\"\"Initialize the event proxy. Args: event_source: The event source. Returns: None \"\"\" super () . __init__ () # No proxies for the root class. self . proxies = [] # This is used for leave objects which # don't have their own proxies. # # Subclassed managers that set their own proxy # will not have this. self . event_source = event_source def unhandled_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Handle unhandled events. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None \"\"\" # inspect.stack()[1] is the call frame above us, so this should be reasonable. event_handler = inspect . stack ()[ 1 ] . function event = kwargs . get ( 'event' ) event_trigger = kwargs . get ( 'trigger' , None ) self . log . debug ( f 'Unhandled Event { event_handler } : ' f ' { self . event_source } -> { event } Event Trigger: { event_trigger } ' ) def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. \"\"\" return self . unhandled_event","title":"EventProxy"},{"location":"#glitchygames.events.EventManager.EventProxy.__getattr__","text":"Get an attribute. This method is called when an attribute is not found. Parameters: attr ( str ) \u2013 The attribute to get. Returns: Callable \u2013 The attribute. Source code in glitchygames/events/__init__.py 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. \"\"\" return self . unhandled_event","title":"__getattr__"},{"location":"#glitchygames.events.EventManager.EventProxy.__init__","text":"Initialize the event proxy. Parameters: event_source ( object ) \u2013 The event source. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 def __init__ ( self : Self , event_source : object ) -> None : \"\"\"Initialize the event proxy. Args: event_source: The event source. Returns: None \"\"\" super () . __init__ () # No proxies for the root class. self . proxies = [] # This is used for leave objects which # don't have their own proxies. # # Subclassed managers that set their own proxy # will not have this. self . event_source = event_source","title":"__init__"},{"location":"#glitchygames.events.EventManager.EventProxy.unhandled_event","text":"Handle unhandled events. Parameters: *args \u2013 The positional arguments. **kwargs \u2013 The keyword arguments. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 def unhandled_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Handle unhandled events. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None \"\"\" # inspect.stack()[1] is the call frame above us, so this should be reasonable. event_handler = inspect . stack ()[ 1 ] . function event = kwargs . get ( 'event' ) event_trigger = kwargs . get ( 'trigger' , None ) self . log . debug ( f 'Unhandled Event { event_handler } : ' f ' { self . event_source } -> { event } Event Trigger: { event_trigger } ' )","title":"unhandled_event"},{"location":"#glitchygames.events.EventManager.__init__","text":"Initialize the event manager. Parameters: game ( object , default: None ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game ) self . proxies = [ EventManager . EventProxy ( event_source = self )]","title":"__init__"},{"location":"#glitchygames.events.FontEventStubs","text":"Bases: EventInterface Mixin for font events. Source code in glitchygames/events/__init__.py 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 class FontEventStubs ( EventInterface ): \"\"\"Mixin for font events.\"\"\" @functools . cache def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FONTS_CHANGED unhandled_event ( self , event )","title":"FontEventStubs"},{"location":"#glitchygames.events.FontEventStubs.on_font_changed_event","text":"Handle font changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 @functools . cache def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FONTS_CHANGED unhandled_event ( self , event )","title":"on_font_changed_event"},{"location":"#glitchygames.events.FontEvents","text":"Bases: EventInterface Mixin for font events. Source code in glitchygames/events/__init__.py 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 class FontEvents ( EventInterface ): \"\"\"Mixin for font events.\"\"\" @abc . abstractmethod def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"FontEvents"},{"location":"#glitchygames.events.FontEvents.on_font_changed_event","text":"Handle font changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 @abc . abstractmethod def on_font_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle font changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_font_changed_event"},{"location":"#glitchygames.events.GameEventStubs","text":"Bases: EventInterface Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. Source code in glitchygames/events/__init__.py 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 class GameEventStubs ( EventInterface ): \"\"\"Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. \"\"\" @functools . cache def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # ACTIVEEVENT gain, state unhandled_event ( self , event ) @functools . cache def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 unhandled_event ( self , event ) @functools . cache def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 unhandled_event ( self , event ) @functools . cache def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 unhandled_event ( self , event ) @functools . cache def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # SYSWMEVENT unhandled_event ( self , event ) @functools . cache def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # USEREVENT code unhandled_event ( self , event ) @functools . cache def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEOEXPOSE none unhandled_event ( self , event ) @functools . cache def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEORESIZE size, w, h unhandled_event ( self , event ) @functools . cache def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # QUIT none unhandled_event ( self , event )","title":"GameEventStubs"},{"location":"#glitchygames.events.GameEventStubs.on_active_event","text":"Handle active events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 @functools . cache def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # ACTIVEEVENT gain, state unhandled_event ( self , event )","title":"on_active_event"},{"location":"#glitchygames.events.GameEventStubs.on_fps_event","text":"Handle FPS events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 @functools . cache def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 unhandled_event ( self , event )","title":"on_fps_event"},{"location":"#glitchygames.events.GameEventStubs.on_game_event","text":"Handle game events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 @functools . cache def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 unhandled_event ( self , event )","title":"on_game_event"},{"location":"#glitchygames.events.GameEventStubs.on_menu_item_event","text":"Handle menu item events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 @functools . cache def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 unhandled_event ( self , event )","title":"on_menu_item_event"},{"location":"#glitchygames.events.GameEventStubs.on_quit_event","text":"Handle quit events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 @functools . cache def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # QUIT none unhandled_event ( self , event )","title":"on_quit_event"},{"location":"#glitchygames.events.GameEventStubs.on_sys_wm_event","text":"Handle sys wm events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 @functools . cache def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # SYSWMEVENT unhandled_event ( self , event )","title":"on_sys_wm_event"},{"location":"#glitchygames.events.GameEventStubs.on_user_event","text":"Handle user events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 @functools . cache def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # USEREVENT code unhandled_event ( self , event )","title":"on_user_event"},{"location":"#glitchygames.events.GameEventStubs.on_video_expose_event","text":"Handle video expose events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 @functools . cache def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEOEXPOSE none unhandled_event ( self , event )","title":"on_video_expose_event"},{"location":"#glitchygames.events.GameEventStubs.on_video_resize_event","text":"Handle video resize events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 @functools . cache def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEORESIZE size, w, h unhandled_event ( self , event )","title":"on_video_resize_event"},{"location":"#glitchygames.events.GameEvents","text":"Bases: EventInterface Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. Source code in glitchygames/events/__init__.py 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 class GameEvents ( EventInterface ): \"\"\"Mixin for glitchy game events. This includes built-ins like QUIT, and synthesized events like FPS and GAME events. It's sort of a catch-all for event types that didn't have a good home otherwise. \"\"\" @abc . abstractmethod def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # ACTIVEEVENT gain, state @abc . abstractmethod def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 @abc . abstractmethod def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 @abc . abstractmethod def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 @abc . abstractmethod def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # SYSWMEVENT @abc . abstractmethod def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # USEREVENT code @abc . abstractmethod def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEOEXPOSE none @abc . abstractmethod def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # VIDEORESIZE size, w, h @abc . abstractmethod def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"GameEvents"},{"location":"#glitchygames.events.GameEvents.on_active_event","text":"Handle active events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 956 957 958 959 960 961 962 963 964 965 @abc . abstractmethod def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_active_event"},{"location":"#glitchygames.events.GameEvents.on_fps_event","text":"Handle FPS events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 968 969 970 971 972 973 974 975 976 977 @abc . abstractmethod def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle FPS events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_fps_event"},{"location":"#glitchygames.events.GameEvents.on_game_event","text":"Handle game events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 980 981 982 983 984 985 986 987 988 989 @abc . abstractmethod def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_game_event"},{"location":"#glitchygames.events.GameEvents.on_menu_item_event","text":"Handle menu item events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 992 993 994 995 996 997 998 999 1000 1001 @abc . abstractmethod def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_menu_item_event"},{"location":"#glitchygames.events.GameEvents.on_quit_event","text":"Handle quit events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 @abc . abstractmethod def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_quit_event"},{"location":"#glitchygames.events.GameEvents.on_sys_wm_event","text":"Handle sys wm events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 @abc . abstractmethod def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_sys_wm_event"},{"location":"#glitchygames.events.GameEvents.on_user_event","text":"Handle user events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 @abc . abstractmethod def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_user_event"},{"location":"#glitchygames.events.GameEvents.on_video_expose_event","text":"Handle video expose events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 @abc . abstractmethod def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_video_expose_event"},{"location":"#glitchygames.events.GameEvents.on_video_resize_event","text":"Handle video resize events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 @abc . abstractmethod def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_video_resize_event"},{"location":"#glitchygames.events.JoystickEventStubs","text":"Bases: EventInterface Mixin for joystick events. Source code in glitchygames/events/__init__.py 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 class JoystickEventStubs ( EventInterface ): \"\"\"Mixin for joystick events.\"\"\" @functools . cache def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYAXISMOTION joy, axis, value unhandled_event ( self , event ) @functools . cache def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONDOWN joy, button unhandled_event ( self , event ) @functools . cache def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONUP joy, button unhandled_event ( self , event ) @functools . cache def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYHATMOTION joy, hat, value unhandled_event ( self , event ) @functools . cache def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBALLMOTION joy, ball, rel unhandled_event ( self , event ) @functools . cache def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEADDED device_index, guid unhandled_event ( self , event ) @functools . cache def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEREMOVED device_index unhandled_event ( self , event )","title":"JoystickEventStubs"},{"location":"#glitchygames.events.JoystickEventStubs.on_joy_axis_motion_event","text":"Handle joystick axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 @functools . cache def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYAXISMOTION joy, axis, value unhandled_event ( self , event )","title":"on_joy_axis_motion_event"},{"location":"#glitchygames.events.JoystickEventStubs.on_joy_ball_motion_event","text":"Handle joystick ball motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 @functools . cache def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBALLMOTION joy, ball, rel unhandled_event ( self , event )","title":"on_joy_ball_motion_event"},{"location":"#glitchygames.events.JoystickEventStubs.on_joy_button_down_event","text":"Handle joystick button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 @functools . cache def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONDOWN joy, button unhandled_event ( self , event )","title":"on_joy_button_down_event"},{"location":"#glitchygames.events.JoystickEventStubs.on_joy_button_up_event","text":"Handle joystick button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 @functools . cache def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONUP joy, button unhandled_event ( self , event )","title":"on_joy_button_up_event"},{"location":"#glitchygames.events.JoystickEventStubs.on_joy_device_added_event","text":"Handle joystick device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 @functools . cache def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEADDED device_index, guid unhandled_event ( self , event )","title":"on_joy_device_added_event"},{"location":"#glitchygames.events.JoystickEventStubs.on_joy_device_removed_event","text":"Handle joystick device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 @functools . cache def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEREMOVED device_index unhandled_event ( self , event )","title":"on_joy_device_removed_event"},{"location":"#glitchygames.events.JoystickEventStubs.on_joy_hat_motion_event","text":"Handle joystick hat motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 @functools . cache def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYHATMOTION joy, hat, value unhandled_event ( self , event )","title":"on_joy_hat_motion_event"},{"location":"#glitchygames.events.JoystickEvents","text":"Bases: EventInterface Mixin for joystick events. Source code in glitchygames/events/__init__.py 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 class JoystickEvents ( EventInterface ): \"\"\"Mixin for joystick events.\"\"\" @abc . abstractmethod def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYAXISMOTION joy, axis, value @abc . abstractmethod def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONDOWN joy, button @abc . abstractmethod def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBUTTONUP joy, button @abc . abstractmethod def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYHATMOTION joy, hat, value @abc . abstractmethod def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYBALLMOTION joy, ball, rel @abc . abstractmethod def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # JOYDEVICEADDED device_index, guid @abc . abstractmethod def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"JoystickEvents"},{"location":"#glitchygames.events.JoystickEvents.on_joy_axis_motion_event","text":"Handle joystick axis motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 @abc . abstractmethod def on_joy_axis_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick axis motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_joy_axis_motion_event"},{"location":"#glitchygames.events.JoystickEvents.on_joy_ball_motion_event","text":"Handle joystick ball motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 @abc . abstractmethod def on_joy_ball_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick ball motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_joy_ball_motion_event"},{"location":"#glitchygames.events.JoystickEvents.on_joy_button_down_event","text":"Handle joystick button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 @abc . abstractmethod def on_joy_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_joy_button_down_event"},{"location":"#glitchygames.events.JoystickEvents.on_joy_button_up_event","text":"Handle joystick button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 @abc . abstractmethod def on_joy_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_joy_button_up_event"},{"location":"#glitchygames.events.JoystickEvents.on_joy_device_added_event","text":"Handle joystick device added events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 @abc . abstractmethod def on_joy_device_added_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device added events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_joy_device_added_event"},{"location":"#glitchygames.events.JoystickEvents.on_joy_device_removed_event","text":"Handle joystick device removed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 @abc . abstractmethod def on_joy_device_removed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick device removed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_joy_device_removed_event"},{"location":"#glitchygames.events.JoystickEvents.on_joy_hat_motion_event","text":"Handle joystick hat motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 @abc . abstractmethod def on_joy_hat_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle joystick hat motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_joy_hat_motion_event"},{"location":"#glitchygames.events.KeyboardEventStubs","text":"Bases: EventInterface Mixin for keyboard events. Source code in glitchygames/events/__init__.py 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 class KeyboardEventStubs ( EventInterface ): \"\"\"Mixin for keyboard events.\"\"\" @functools . cache def on_key_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYDOWN unicode, key, mod unhandled_event ( self , event ) @functools . cache def on_key_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYUP key, mod unhandled_event ( self , event ) @functools . cache def on_key_chord_up_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord up events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys ) @functools . cache def on_key_chord_down_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord down events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys )","title":"KeyboardEventStubs"},{"location":"#glitchygames.events.KeyboardEventStubs.on_key_chord_down_event","text":"Handle key chord down events. Parameters: event ( Event ) \u2013 The event to handle. keys ( list ) \u2013 The keys in the chord. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 @functools . cache def on_key_chord_down_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord down events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys )","title":"on_key_chord_down_event"},{"location":"#glitchygames.events.KeyboardEventStubs.on_key_chord_up_event","text":"Handle key chord up events. Parameters: event ( Event ) \u2013 The event to handle. keys ( list ) \u2013 The keys in the chord. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 @functools . cache def on_key_chord_up_event ( self : Self , event : pygame . event . Event , keys : list ) -> None : \"\"\"Handle key chord up events. Args: event (pygame.event.Event): The event to handle. keys (list): The keys in the chord. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , keys )","title":"on_key_chord_up_event"},{"location":"#glitchygames.events.KeyboardEventStubs.on_key_down_event","text":"Handle key down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 @functools . cache def on_key_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYDOWN unicode, key, mod unhandled_event ( self , event )","title":"on_key_down_event"},{"location":"#glitchygames.events.KeyboardEventStubs.on_key_up_event","text":"Handle key up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 @functools . cache def on_key_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle key up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # KEYUP key, mod unhandled_event ( self , event )","title":"on_key_up_event"},{"location":"#glitchygames.events.KeyboardEvents","text":"Bases: EventInterface Mixin for keyboard events. Source code in glitchygames/events/__init__.py 1226 1227 class KeyboardEvents ( EventInterface ): \"\"\"Mixin for keyboard events.\"\"\"","title":"KeyboardEvents"},{"location":"#glitchygames.events.MidiEventStubs","text":"Bases: EventInterface Mixin for midi events. Source code in glitchygames/events/__init__.py 1529 1530 class MidiEventStubs ( EventInterface ): \"\"\"Mixin for midi events.\"\"\"","title":"MidiEventStubs"},{"location":"#glitchygames.events.MidiEvents","text":"Bases: EventInterface Mixin for midi events. Source code in glitchygames/events/__init__.py 1524 1525 class MidiEvents ( EventInterface ): \"\"\"Mixin for midi events.\"\"\"","title":"MidiEvents"},{"location":"#glitchygames.events.MouseEventStubs","text":"Bases: EventInterface Mixin for mouse events. Source code in glitchygames/events/__init__.py 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 1873 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 1887 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 1901 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 1915 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 1929 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 1943 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 1958 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 1973 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 1986 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 2038 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 class MouseEventStubs ( EventInterface ): \"\"\"Mixin for mouse events.\"\"\" @functools . cache def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEMOTION pos, rel, buttons unhandled_event ( self , event ) @functools . cache def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger ) @functools . cache def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , entering_focus ) @functools . cache def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , leaving_focus ) @functools . cache def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONUP pos, button unhandled_event ( self , event ) @functools . cache def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Up pos, button unhandled_event ( self , event ) @functools . cache def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Up pos, button unhandled_event ( self , event ) @functools . cache def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Up pos, button unhandled_event ( self , event ) @functools . cache def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONDOWN pos, button unhandled_event ( self , event ) @functools . cache def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Down pos, button unhandled_event ( self , event ) @functools . cache def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Down pos, button unhandled_event ( self , event ) @functools . cache def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Down pos, button unhandled_event ( self , event ) @functools . cache def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event ) @functools . cache def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event ) @functools . cache def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEWHEEL flipped, y, x, touch, window unhandled_event ( self , event )","title":"MouseEventStubs"},{"location":"#glitchygames.events.MouseEventStubs.on_left_mouse_button_down_event","text":"Handle left mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2039 2040 2041 2042 2043 2044 2045 2046 2047 2048 2049 2050 @functools . cache def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Down pos, button unhandled_event ( self , event )","title":"on_left_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEventStubs.on_left_mouse_button_up_event","text":"Handle left mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1987 1988 1989 1990 1991 1992 1993 1994 1995 1996 1997 1998 @functools . cache def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Up pos, button unhandled_event ( self , event )","title":"on_left_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEventStubs.on_left_mouse_drag_event","text":"Handle left mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1860 1861 1862 1863 1864 1865 1866 1867 1868 1869 1870 1871 1872 @functools . cache def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_left_mouse_drag_event"},{"location":"#glitchygames.events.MouseEventStubs.on_left_mouse_drop_event","text":"Handle left mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1874 1875 1876 1877 1878 1879 1880 1881 1882 1883 1884 1885 1886 @functools . cache def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_left_mouse_drop_event"},{"location":"#glitchygames.events.MouseEventStubs.on_middle_mouse_button_down_event","text":"Handle middle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 @functools . cache def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Down pos, button unhandled_event ( self , event )","title":"on_middle_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEventStubs.on_middle_mouse_button_up_event","text":"Handle middle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2000 2001 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 @functools . cache def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Up pos, button unhandled_event ( self , event )","title":"on_middle_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEventStubs.on_middle_mouse_drag_event","text":"Handle middle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1888 1889 1890 1891 1892 1893 1894 1895 1896 1897 1898 1899 1900 @functools . cache def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_middle_mouse_drag_event"},{"location":"#glitchygames.events.MouseEventStubs.on_middle_mouse_drop_event","text":"Handle middle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1902 1903 1904 1905 1906 1907 1908 1909 1910 1911 1912 1913 1914 @functools . cache def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_middle_mouse_drop_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_button_down_event","text":"Handle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2026 2027 2028 2029 2030 2031 2032 2033 2034 2035 2036 2037 @functools . cache def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONDOWN pos, button unhandled_event ( self , event )","title":"on_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_button_up_event","text":"Handle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1974 1975 1976 1977 1978 1979 1980 1981 1982 1983 1984 1985 @functools . cache def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONUP pos, button unhandled_event ( self , event )","title":"on_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_drag_event","text":"Handle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 @functools . cache def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_mouse_drag_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_drop_event","text":"Handle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 @functools . cache def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_mouse_drop_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_focus_event","text":"Handle mouse focus events. Parameters: event ( Event ) \u2013 The event to handle. entering_focus ( object ) \u2013 The object that is entering focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1944 1945 1946 1947 1948 1949 1950 1951 1952 1953 1954 1955 1956 1957 @functools . cache def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , entering_focus )","title":"on_mouse_focus_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_motion_event","text":"Handle mouse motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 @functools . cache def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEMOTION pos, rel, buttons unhandled_event ( self , event )","title":"on_mouse_motion_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_scroll_down_event","text":"Handle mouse scroll down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 @functools . cache def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event )","title":"on_mouse_scroll_down_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_scroll_up_event","text":"Handle mouse scroll up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 @functools . cache def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. unhandled_event ( self , event )","title":"on_mouse_scroll_up_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_unfocus_event","text":"Handle mouse unfocus events. Parameters: event ( Event ) \u2013 The event to handle. leaving_focus ( object ) \u2013 The object that is leaving focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1959 1960 1961 1962 1963 1964 1965 1966 1967 1968 1969 1970 1971 1972 @functools . cache def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , leaving_focus )","title":"on_mouse_unfocus_event"},{"location":"#glitchygames.events.MouseEventStubs.on_mouse_wheel_event","text":"Handle mouse wheel events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 @functools . cache def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEWHEEL flipped, y, x, touch, window unhandled_event ( self , event )","title":"on_mouse_wheel_event"},{"location":"#glitchygames.events.MouseEventStubs.on_right_mouse_button_down_event","text":"Handle right mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 @functools . cache def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Down pos, button unhandled_event ( self , event )","title":"on_right_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEventStubs.on_right_mouse_button_up_event","text":"Handle right mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 @functools . cache def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Up pos, button unhandled_event ( self , event )","title":"on_right_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEventStubs.on_right_mouse_drag_event","text":"Handle right mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1916 1917 1918 1919 1920 1921 1922 1923 1924 1925 1926 1927 1928 @functools . cache def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_right_mouse_drag_event"},{"location":"#glitchygames.events.MouseEventStubs.on_right_mouse_drop_event","text":"Handle right mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1930 1931 1932 1933 1934 1935 1936 1937 1938 1939 1940 1941 1942 @functools . cache def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. unhandled_event ( self , event , trigger )","title":"on_right_mouse_drop_event"},{"location":"#glitchygames.events.MouseEvents","text":"Bases: EventInterface Mixin for mouse events. Source code in glitchygames/events/__init__.py 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 class MouseEvents ( EventInterface ): \"\"\"Mixin for mouse events.\"\"\" @abc . abstractmethod def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEMOTION pos, rel, buttons @abc . abstractmethod def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\" # Synthesized event. @abc . abstractmethod def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONUP pos, button @abc . abstractmethod def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Up pos, button @abc . abstractmethod def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Up pos, button @abc . abstractmethod def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Up pos, button @abc . abstractmethod def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # MOUSEBUTTONDOWN pos, button @abc . abstractmethod def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Left Mouse Button Down pos, button @abc . abstractmethod def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Middle Mouse Button Down pos, button @abc . abstractmethod def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # Right Mouse Button Down pos, button @abc . abstractmethod def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. @abc . abstractmethod def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # This is a synthesized event. @abc . abstractmethod def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"MouseEvents"},{"location":"#glitchygames.events.MouseEvents.on_left_mouse_button_down_event","text":"Handle left mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 @abc . abstractmethod def on_left_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_left_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEvents.on_left_mouse_button_up_event","text":"Handle left mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 @abc . abstractmethod def on_left_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle left mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_left_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEvents.on_left_mouse_drag_event","text":"Handle left mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 @abc . abstractmethod def on_left_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_left_mouse_drag_event"},{"location":"#glitchygames.events.MouseEvents.on_left_mouse_drop_event","text":"Handle left mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 @abc . abstractmethod def on_left_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle left mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_left_mouse_drop_event"},{"location":"#glitchygames.events.MouseEvents.on_middle_mouse_button_down_event","text":"Handle middle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 @abc . abstractmethod def on_middle_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_middle_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEvents.on_middle_mouse_button_up_event","text":"Handle middle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 @abc . abstractmethod def on_middle_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle middle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_middle_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEvents.on_middle_mouse_drag_event","text":"Handle middle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 @abc . abstractmethod def on_middle_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_middle_mouse_drag_event"},{"location":"#glitchygames.events.MouseEvents.on_middle_mouse_drop_event","text":"Handle middle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 @abc . abstractmethod def on_middle_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle middle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_middle_mouse_drop_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_button_down_event","text":"Handle mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 @abc . abstractmethod def on_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_button_up_event","text":"Handle mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 @abc . abstractmethod def on_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_drag_event","text":"Handle mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 @abc . abstractmethod def on_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_mouse_drag_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_drop_event","text":"Handle mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 @abc . abstractmethod def on_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_mouse_drop_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_focus_event","text":"Handle mouse focus events. Parameters: event ( Event ) \u2013 The event to handle. entering_focus ( object ) \u2013 The object that is entering focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 @abc . abstractmethod def on_mouse_focus_event ( self : Self , event : pygame . event . Event , entering_focus : object ) -> None : \"\"\"Handle mouse focus events. Args: event (pygame.event.Event): The event to handle. entering_focus (object): The object that is entering focus. Returns: None \"\"\"","title":"on_mouse_focus_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_motion_event","text":"Handle mouse motion events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 @abc . abstractmethod def on_mouse_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse motion events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_mouse_motion_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_scroll_down_event","text":"Handle mouse scroll down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 @abc . abstractmethod def on_mouse_scroll_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_mouse_scroll_down_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_scroll_up_event","text":"Handle mouse scroll up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 @abc . abstractmethod def on_mouse_scroll_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse scroll up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_mouse_scroll_up_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_unfocus_event","text":"Handle mouse unfocus events. Parameters: event ( Event ) \u2013 The event to handle. leaving_focus ( object ) \u2013 The object that is leaving focus. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 @abc . abstractmethod def on_mouse_unfocus_event ( self : Self , event : pygame . event . Event , leaving_focus : object ) -> None : \"\"\"Handle mouse unfocus events. Args: event (pygame.event.Event): The event to handle. leaving_focus (object): The object that is leaving focus. Returns: None \"\"\"","title":"on_mouse_unfocus_event"},{"location":"#glitchygames.events.MouseEvents.on_mouse_wheel_event","text":"Handle mouse wheel events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 @abc . abstractmethod def on_mouse_wheel_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle mouse wheel events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_mouse_wheel_event"},{"location":"#glitchygames.events.MouseEvents.on_right_mouse_button_down_event","text":"Handle right mouse button down events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 @abc . abstractmethod def on_right_mouse_button_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button down events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_right_mouse_button_down_event"},{"location":"#glitchygames.events.MouseEvents.on_right_mouse_button_up_event","text":"Handle right mouse button up events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 @abc . abstractmethod def on_right_mouse_button_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle right mouse button up events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_right_mouse_button_up_event"},{"location":"#glitchygames.events.MouseEvents.on_right_mouse_drag_event","text":"Handle right mouse drag events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 @abc . abstractmethod def on_right_mouse_drag_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drag events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_right_mouse_drag_event"},{"location":"#glitchygames.events.MouseEvents.on_right_mouse_drop_event","text":"Handle right mouse drop events. Parameters: event ( Event ) \u2013 The event to handle. trigger ( object ) \u2013 The object that triggered the event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 @abc . abstractmethod def on_right_mouse_drop_event ( self : Self , event : pygame . event . Event , trigger : object ) -> None : \"\"\"Handle right mouse drop events. Args: event (pygame.event.Event): The event to handle. trigger (object): The object that triggered the event. Returns: None \"\"\"","title":"on_right_mouse_drop_event"},{"location":"#glitchygames.events.ResourceManager","text":"Singleton aggregator base class for event proxies. A ResourceManager subclass will generally pass all requests through to its proxy object(s), however, for certain types of resources such as joysticks, the subclass will manage things itself. This architecture reduces code footprint, and allows maxium flexibility when needed, at the expense of a bit of abstraction. Unless you're implementing a new pygame event manager, you probably don't need to worry about this. Any subclass of ResourceManager will become a singleton class automatically. This ensures that there is only ever a single manager for any given resource. For instance, a second instantiation of MouseManager would return the same MouseManager object that the GameEngine created to process mouse events with. This behavior allows easy access to resource managers anywhere in the game without needing an explicit copy of the game object, althogh since GameEngine is also a subclass of EventManager, it too is a ResourceManager which can be gotten to from anywhere, since it's a singleton. Source code in glitchygames/events/__init__.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 class ResourceManager : \"\"\"Singleton aggregator base class for event proxies. A ResourceManager subclass will generally pass all requests through to its proxy object(s), however, for certain types of resources such as joysticks, the subclass will manage things itself. This architecture reduces code footprint, and allows maxium flexibility when needed, at the expense of a bit of abstraction. Unless you're implementing a new pygame event manager, you probably don't need to worry about this. Any subclass of ResourceManager will become a singleton class automatically. This ensures that there is only ever a single manager for any given resource. For instance, a second instantiation of MouseManager would return the same MouseManager object that the GameEngine created to process mouse events with. This behavior allows easy access to resource managers anywhere in the game without needing an explicit copy of the game object, althogh since GameEngine is also a subclass of EventManager, it too is a ResourceManager which can be gotten to from anywhere, since it's a singleton. \"\"\" log : logging . Logger = LOG __instances__ : ClassVar = {} def __new__ ( cls : Self , * args , ** kwargs ) -> object : \"\"\"Create a new instance of the class. This method is called when a new instance of the class Args: cls: The class. *args: The positional arguments. **kwargs: The keyword arguments. Returns: The new instance of the class. Raises: AttributeError: If the event is not handled by any proxy. \"\"\" if cls not in cls . __instances__ : cls . __instances__ [ cls ] = object . __new__ ( cls ) LOG . debug ( f 'Created Resource Manager: { cls } ' ) cls . __instances__ [ cls ] . args = args cls . __instances__ [ cls ] . kwargs = kwargs return cls . __instances__ [ cls ] def __init__ ( self : Self , game : object ) -> None : \"\"\"Initialize the resource manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ () self . proxies = [] def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. Raises: AttributeError: If the attribute is not found. \"\"\" # Try each proxy in turn try : for proxy in self . proxies : return getattr ( proxy , attr ) except AttributeError : self . log . exception ( f 'No proxies for { type ( self ) } . { attr } ' ) raise raise AttributeError ( f 'No proxies for { type ( self ) } . { attr } ' )","title":"ResourceManager"},{"location":"#glitchygames.events.ResourceManager.__getattr__","text":"Get an attribute. This method is called when an attribute is not found. Parameters: attr ( str ) \u2013 The attribute to get. Returns: Callable \u2013 The attribute. Raises: AttributeError \u2013 If the attribute is not found. Source code in glitchygames/events/__init__.py 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Get an attribute. This method is called when an attribute is not found. Args: attr: The attribute to get. Returns: The attribute. Raises: AttributeError: If the attribute is not found. \"\"\" # Try each proxy in turn try : for proxy in self . proxies : return getattr ( proxy , attr ) except AttributeError : self . log . exception ( f 'No proxies for { type ( self ) } . { attr } ' ) raise raise AttributeError ( f 'No proxies for { type ( self ) } . { attr } ' )","title":"__getattr__"},{"location":"#glitchygames.events.ResourceManager.__init__","text":"Initialize the resource manager. Parameters: game ( object ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 228 229 230 231 232 233 234 235 236 237 238 def __init__ ( self : Self , game : object ) -> None : \"\"\"Initialize the resource manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ () self . proxies = []","title":"__init__"},{"location":"#glitchygames.events.ResourceManager.__new__","text":"Create a new instance of the class. This method is called when a new instance of the class Parameters: cls ( Self ) \u2013 The class. *args \u2013 The positional arguments. **kwargs \u2013 The keyword arguments. Returns: object \u2013 The new instance of the class. Raises: AttributeError \u2013 If the event is not handled by any proxy. Source code in glitchygames/events/__init__.py 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def __new__ ( cls : Self , * args , ** kwargs ) -> object : \"\"\"Create a new instance of the class. This method is called when a new instance of the class Args: cls: The class. *args: The positional arguments. **kwargs: The keyword arguments. Returns: The new instance of the class. Raises: AttributeError: If the event is not handled by any proxy. \"\"\" if cls not in cls . __instances__ : cls . __instances__ [ cls ] = object . __new__ ( cls ) LOG . debug ( f 'Created Resource Manager: { cls } ' ) cls . __instances__ [ cls ] . args = args cls . __instances__ [ cls ] . kwargs = kwargs return cls . __instances__ [ cls ]","title":"__new__"},{"location":"#glitchygames.events.TextEventStubs","text":"Bases: EventInterface Mixin for text events. Source code in glitchygames/events/__init__.py 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 class TextEventStubs ( EventInterface ): \"\"\"Mixin for text events.\"\"\" @functools . cache def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTEDITING text, start, length unhandled_event ( self , event ) @functools . cache def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTINPUT text unhandled_event ( self , event )","title":"TextEventStubs"},{"location":"#glitchygames.events.TextEventStubs.on_text_editing_event","text":"Handle text editing events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 @functools . cache def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTEDITING text, start, length unhandled_event ( self , event )","title":"on_text_editing_event"},{"location":"#glitchygames.events.TextEventStubs.on_text_input_event","text":"Handle text input events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 @functools . cache def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTINPUT text unhandled_event ( self , event )","title":"on_text_input_event"},{"location":"#glitchygames.events.TextEvents","text":"Bases: EventInterface Mixin for text events. Source code in glitchygames/events/__init__.py 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 class TextEvents ( EventInterface ): \"\"\"Mixin for text events.\"\"\" @abc . abstractmethod def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # TEXTEDITING text, start, length @abc . abstractmethod def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"TextEvents"},{"location":"#glitchygames.events.TextEvents.on_text_editing_event","text":"Handle text editing events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 @abc . abstractmethod def on_text_editing_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text editing events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_text_editing_event"},{"location":"#glitchygames.events.TextEvents.on_text_input_event","text":"Handle text input events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 @abc . abstractmethod def on_text_input_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle text input events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_text_input_event"},{"location":"#glitchygames.events.TouchEventStubs","text":"Bases: EventInterface Mixin for touch events. Source code in glitchygames/events/__init__.py 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 class TouchEventStubs ( EventInterface ): \"\"\"Mixin for touch events.\"\"\" @functools . cache def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\" # FINGERDOWN finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\" # FINGERMOTION finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\" # FINGERUP finger_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERDOWN touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERMOTION touch_id, x, y, dx, dy, pressure unhandled_event ( self , event ) @functools . cache def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERUP touch_id, x, y, dx, dy, pressure unhandled_event ( self , event )","title":"TouchEventStubs"},{"location":"#glitchygames.events.TouchEventStubs.on_multi_touch_down_event","text":"Handle multi finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 901 902 903 904 905 906 907 908 909 910 911 912 @functools . cache def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERDOWN touch_id, x, y, dx, dy, pressure unhandled_event ( self , event )","title":"on_multi_touch_down_event"},{"location":"#glitchygames.events.TouchEventStubs.on_multi_touch_motion_event","text":"Handle multi finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 914 915 916 917 918 919 920 921 922 923 924 925 @functools . cache def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERMOTION touch_id, x, y, dx, dy, pressure unhandled_event ( self , event )","title":"on_multi_touch_motion_event"},{"location":"#glitchygames.events.TouchEventStubs.on_multi_touch_up_event","text":"Handle multi finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 927 928 929 930 931 932 933 934 935 936 937 938 @functools . cache def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERUP touch_id, x, y, dx, dy, pressure unhandled_event ( self , event )","title":"on_multi_touch_up_event"},{"location":"#glitchygames.events.TouchEventStubs.on_touch_down_event","text":"Handle finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 862 863 864 865 866 867 868 869 870 871 872 873 @functools . cache def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\" # FINGERDOWN finger_id, x, y, dx, dy, pressure unhandled_event ( self , event )","title":"on_touch_down_event"},{"location":"#glitchygames.events.TouchEventStubs.on_touch_motion_event","text":"Handle finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 875 876 877 878 879 880 881 882 883 884 885 886 @functools . cache def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\" # FINGERMOTION finger_id, x, y, dx, dy, pressure unhandled_event ( self , event )","title":"on_touch_motion_event"},{"location":"#glitchygames.events.TouchEventStubs.on_touch_up_event","text":"Handle finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 888 889 890 891 892 893 894 895 896 897 898 899 @functools . cache def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\" # FINGERUP finger_id, x, y, dx, dy, pressure unhandled_event ( self , event )","title":"on_touch_up_event"},{"location":"#glitchygames.events.TouchEvents","text":"Bases: EventInterface Mixin for touch events. Source code in glitchygames/events/__init__.py 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 class TouchEvents ( EventInterface ): \"\"\"Mixin for touch events.\"\"\" @abc . abstractmethod def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\" # FINGERDOWN finger_id, x, y, dx, dy, pressure @abc . abstractmethod def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\" # FINGERMOTION finger_id, x, y, dx, dy, pressure @abc . abstractmethod def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\" # FINGERUP finger_id, x, y, dx, dy, pressure @abc . abstractmethod def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERDOWN touch_id, x, y, dx, dy, pressure @abc . abstractmethod def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\" # MULTIFINGERMOTION touch_id, x, y, dx, dy, pressure @abc . abstractmethod def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\"","title":"TouchEvents"},{"location":"#glitchygames.events.TouchEvents.on_multi_touch_down_event","text":"Handle multi finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 822 823 824 825 826 827 828 829 830 831 @abc . abstractmethod def on_multi_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger down event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_multi_touch_down_event"},{"location":"#glitchygames.events.TouchEvents.on_multi_touch_motion_event","text":"Handle multi finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 834 835 836 837 838 839 840 841 842 843 @abc . abstractmethod def on_multi_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger motion event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_multi_touch_motion_event"},{"location":"#glitchygames.events.TouchEvents.on_multi_touch_up_event","text":"Handle multi finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 846 847 848 849 850 851 852 853 854 855 @abc . abstractmethod def on_multi_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle multi finger up event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_multi_touch_up_event"},{"location":"#glitchygames.events.TouchEvents.on_touch_down_event","text":"Handle finger down event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 786 787 788 789 790 791 792 793 794 795 @abc . abstractmethod def on_touch_down_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger down event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_touch_down_event"},{"location":"#glitchygames.events.TouchEvents.on_touch_motion_event","text":"Handle finger motion event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 798 799 800 801 802 803 804 805 806 807 @abc . abstractmethod def on_touch_motion_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger motion event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_touch_motion_event"},{"location":"#glitchygames.events.TouchEvents.on_touch_up_event","text":"Handle finger up event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 810 811 812 813 814 815 816 817 818 819 @abc . abstractmethod def on_touch_up_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle finger up event. Args: event: The pygame event. Returns: None \"\"\"","title":"on_touch_up_event"},{"location":"#glitchygames.events.WindowEventStubs","text":"Bases: EventInterface Mixin for window events. Source code in glitchygames/events/__init__.py 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 class WindowEventStubs ( EventInterface ): \"\"\"Mixin for window events.\"\"\" @functools . cache def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWCLOSE none unhandled_event ( self , event ) @functools . cache def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWENTER none unhandled_event ( self , event ) @functools . cache def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWEXPOSED none unhandled_event ( self , event ) @functools . cache def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSGAINED none unhandled_event ( self , event ) @functools . cache def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSLOST none unhandled_event ( self , event ) @functools . cache def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHIDDEN none unhandled_event ( self , event ) @functools . cache def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHITTEST none unhandled_event ( self , event ) @functools . cache def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWLEAVE none unhandled_event ( self , event ) @functools . cache def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMAXIMIZED none unhandled_event ( self , event ) @functools . cache def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMINIMIZED none unhandled_event ( self , event ) @functools . cache def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMOVED none unhandled_event ( self , event ) @functools . cache def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESIZED size, w, h unhandled_event ( self , event ) @functools . cache def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESTORED none unhandled_event ( self , event ) @functools . cache def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSHOWN none unhandled_event ( self , event ) @functools . cache def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSIZECHANGED size, w, h unhandled_event ( self , event ) @functools . cache def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWTAKEFOCUS none unhandled_event ( self , event )","title":"WindowEventStubs"},{"location":"#glitchygames.events.WindowEventStubs.on_window_close_event","text":"Handle window close events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 @functools . cache def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWCLOSE none unhandled_event ( self , event )","title":"on_window_close_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_enter_event","text":"Handle window enter events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 @functools . cache def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWENTER none unhandled_event ( self , event )","title":"on_window_enter_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_exposed_event","text":"Handle window exposed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 @functools . cache def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWEXPOSED none unhandled_event ( self , event )","title":"on_window_exposed_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_focus_gained_event","text":"Handle window focus gained events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 @functools . cache def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSGAINED none unhandled_event ( self , event )","title":"on_window_focus_gained_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_focus_lost_event","text":"Handle window focus lost events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 @functools . cache def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSLOST none unhandled_event ( self , event )","title":"on_window_focus_lost_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_hidden_event","text":"Handle window hidden events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 @functools . cache def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHIDDEN none unhandled_event ( self , event )","title":"on_window_hidden_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_hit_test_event","text":"Handle window hit test events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 @functools . cache def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHITTEST none unhandled_event ( self , event )","title":"on_window_hit_test_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_leave_event","text":"Handle window leave events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 @functools . cache def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWLEAVE none unhandled_event ( self , event )","title":"on_window_leave_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_maximized_event","text":"Handle window maximized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 @functools . cache def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMAXIMIZED none unhandled_event ( self , event )","title":"on_window_maximized_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_minimized_event","text":"Handle window minimized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 @functools . cache def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMINIMIZED none unhandled_event ( self , event )","title":"on_window_minimized_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_moved_event","text":"Handle window moved events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 @functools . cache def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMOVED none unhandled_event ( self , event )","title":"on_window_moved_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_resized_event","text":"Handle window resized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 @functools . cache def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESIZED size, w, h unhandled_event ( self , event )","title":"on_window_resized_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_restored_event","text":"Handle window restored events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 @functools . cache def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESTORED none unhandled_event ( self , event )","title":"on_window_restored_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_shown_event","text":"Handle window shown events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 @functools . cache def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSHOWN none unhandled_event ( self , event )","title":"on_window_shown_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_size_changed_event","text":"Handle window size changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 @functools . cache def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSIZECHANGED size, w, h unhandled_event ( self , event )","title":"on_window_size_changed_event"},{"location":"#glitchygames.events.WindowEventStubs.on_window_take_focus_event","text":"Handle window take focus events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 @functools . cache def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWTAKEFOCUS none unhandled_event ( self , event )","title":"on_window_take_focus_event"},{"location":"#glitchygames.events.WindowEvents","text":"Bases: EventInterface Mixin for window events. Source code in glitchygames/events/__init__.py 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 class WindowEvents ( EventInterface ): \"\"\"Mixin for window events.\"\"\" @abc . abstractmethod def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWCLOSE none @abc . abstractmethod def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWENTER none @abc . abstractmethod def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWEXPOSED none @abc . abstractmethod def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSGAINED none @abc . abstractmethod def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWFOCUSLOST none @abc . abstractmethod def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHIDDEN none @abc . abstractmethod def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWHITTEST none @abc . abstractmethod def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWLEAVE none @abc . abstractmethod def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMAXIMIZED none @abc . abstractmethod def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMINIMIZED none @abc . abstractmethod def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWMOVED none @abc . abstractmethod def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESIZED size, w, h @abc . abstractmethod def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWRESTORED none @abc . abstractmethod def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSHOWN none @abc . abstractmethod def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\" # WINDOWSIZECHANGED size, w, h @abc . abstractmethod def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"WindowEvents"},{"location":"#glitchygames.events.WindowEvents.on_window_close_event","text":"Handle window close events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 @abc . abstractmethod def on_window_close_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window close events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_close_event"},{"location":"#glitchygames.events.WindowEvents.on_window_enter_event","text":"Handle window enter events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 @abc . abstractmethod def on_window_enter_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window enter events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_enter_event"},{"location":"#glitchygames.events.WindowEvents.on_window_exposed_event","text":"Handle window exposed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 @abc . abstractmethod def on_window_exposed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window exposed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_exposed_event"},{"location":"#glitchygames.events.WindowEvents.on_window_focus_gained_event","text":"Handle window focus gained events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 @abc . abstractmethod def on_window_focus_gained_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus gained events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_focus_gained_event"},{"location":"#glitchygames.events.WindowEvents.on_window_focus_lost_event","text":"Handle window focus lost events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 @abc . abstractmethod def on_window_focus_lost_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window focus lost events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_focus_lost_event"},{"location":"#glitchygames.events.WindowEvents.on_window_hidden_event","text":"Handle window hidden events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 @abc . abstractmethod def on_window_hidden_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hidden events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_hidden_event"},{"location":"#glitchygames.events.WindowEvents.on_window_hit_test_event","text":"Handle window hit test events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 @abc . abstractmethod def on_window_hit_test_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window hit test events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_hit_test_event"},{"location":"#glitchygames.events.WindowEvents.on_window_leave_event","text":"Handle window leave events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 @abc . abstractmethod def on_window_leave_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window leave events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_leave_event"},{"location":"#glitchygames.events.WindowEvents.on_window_maximized_event","text":"Handle window maximized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 @abc . abstractmethod def on_window_maximized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window maximized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_maximized_event"},{"location":"#glitchygames.events.WindowEvents.on_window_minimized_event","text":"Handle window minimized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 @abc . abstractmethod def on_window_minimized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window minimized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_minimized_event"},{"location":"#glitchygames.events.WindowEvents.on_window_moved_event","text":"Handle window moved events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 @abc . abstractmethod def on_window_moved_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window moved events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_moved_event"},{"location":"#glitchygames.events.WindowEvents.on_window_resized_event","text":"Handle window resized events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 @abc . abstractmethod def on_window_resized_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window resized events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_resized_event"},{"location":"#glitchygames.events.WindowEvents.on_window_restored_event","text":"Handle window restored events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 @abc . abstractmethod def on_window_restored_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window restored events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_restored_event"},{"location":"#glitchygames.events.WindowEvents.on_window_shown_event","text":"Handle window shown events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 @abc . abstractmethod def on_window_shown_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window shown events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_shown_event"},{"location":"#glitchygames.events.WindowEvents.on_window_size_changed_event","text":"Handle window size changed events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 @abc . abstractmethod def on_window_size_changed_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window size changed events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_size_changed_event"},{"location":"#glitchygames.events.WindowEvents.on_window_take_focus_event","text":"Handle window take focus events. Parameters: event ( Event ) \u2013 The event to handle. Returns: None \u2013 None Source code in glitchygames/events/__init__.py 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 @abc . abstractmethod def on_window_take_focus_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle window take focus events. Args: event (pygame.event.Event): The event to handle. Returns: None \"\"\"","title":"on_window_take_focus_event"},{"location":"#glitchygames.events.supported_events","text":"Return a list of supported events. This method is crucial for allowing the game engine to support both older versions of pygame and newer versions. It allows us to enumerate supported pygame events and initialize them dynamically. This ensures that the game engine will work with many versions of pygame. We enumerate all pygame event IDs and then use the pygame.event.event_name() method to get the event name. We then use a regular expression to match the event name against the like parameter. Parameters: like ( str , default: '.*' ) \u2013 A regular expression to match against the event names. Returns: list \u2013 A list of pygame events whose names match the regular expression. Source code in glitchygames/events/__init__.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 def supported_events ( like : str = '.*' ) -> list : \"\"\"Return a list of supported events. This method is crucial for allowing the game engine to support both older versions of pygame and newer versions. It allows us to enumerate supported pygame events and initialize them dynamically. This ensures that the game engine will work with many versions of pygame. We enumerate all pygame event IDs and then use the pygame.event.event_name() method to get the event name. We then use a regular expression to match the event name against the like parameter. Args: like: A regular expression to match against the event names. Returns: A list of pygame events whose names match the regular expression. \"\"\" # Get a list of all of the events # by name, but ignore duplicates. event_names = ( pygame . event . event_name ( event_num ) for event_num in range ( pygame . NUMEVENTS ) ) event_names : set [ str ] = set ( event_names ) - set ( 'Unknown' ) # Pygame 2.5.1 and maybe others have a bug where the event name lookup # is wrong. # # The error is: # # AttributeError: module 'pygame' has no attribute 'CONTROLLERDEVICEMAPPED'. # Did you mean: 'CONTROLLERDEVICEREMAPPED'? # # This is a workaround for that. # # The controller documentation also indicates that it should be CONTROLLERDEVICEREMAPPED patched_event_names = { 'APPDIDENTERBACKGROUND' : 'APP_DIDENTERBACKGROUND' , 'APPDIDENTERFOREGROUND' : 'APP_DIDENTERFOREGROUND' , 'APPLOWMEMORY' : 'APP_LOWMEMORY' , 'APPWILLENTERBACKGROUND' : 'APP_WILLENTERBACKGROUND' , 'APPWILLENTERFOREGROUND' : 'APP_WILLENTERFOREGROUND' , 'APPTERMINATING' : 'APP_TERMINATING' , 'CONTROLLERDEVICEMAPPED' : 'CONTROLLERDEVICEREMAPPED' , 'RENDERDEVICERESET' : 'RENDER_DEVICE_RESET' , 'RENDERTARGETSRESET' : 'RENDER_TARGETS_RESET' , 'UNKNOWN' : 'K_UNKNOWN' } event_list = [] for event_name in list ( event_names ): # If there's a patched event name, use it, otherwise use event_name # # This works around a pygame bug for CONTROLLERDEVICEREMAPPED patched_event_name = patched_event_names . get ( event_name . upper (), event_name ) LOG . info ( f 'Adding Event: { patched_event_name } ' ) if re . match ( like , patched_event_name . upper ()): event_list . append ( getattr ( pygame , patched_event_name . upper ())) return event_list","title":"supported_events"},{"location":"#glitchygames.events.unhandled_event","text":"Handle unhandled events. This method is called when an event is not handled by any of the event handlers. This is helpful for us to debug events that we haven't implemented yet. Parameters: *args \u2013 The positional arguments. **kwargs \u2013 The keyword arguments. Returns: NoReturn \u2013 None Raises: AttributeError \u2013 If the event is not handled. Source code in glitchygames/events/__init__.py 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 @dump_cache_info @functools . cache def unhandled_event ( game , event , * args , ** kwargs ) -> NoReturn : \"\"\"Handle unhandled events. This method is called when an event is not handled by any of the event handlers. This is helpful for us to debug events that we haven't implemented yet. Args: *args: The positional arguments. **kwargs: The keyword arguments. Returns: None Raises: AttributeError: If the event is not handled. \"\"\" if game . options [ 'debug_events' ]: LOG . error ( f 'Unhandled Event: args: { pygame . event . event_name ( event . type ) } { event } { args } { kwargs } ' ) elif game . options [ 'no_unhandled_events' ]: raise AttributeError ( f 'Unhandled Event: args: { pygame . event . event_name ( event . type ) } { event } { args } { kwargs } ' ) Contains GameEngine and helper classes for building a game.","title":"unhandled_event"},{"location":"#glitchygames.engine.GameEngine","text":"Bases: EventManager Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. Source code in glitchygames/engine.py 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 class GameEngine ( events . EventManager ): \"\"\"Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. \"\"\" log : logging . Logger = LOG game : object = None try : icon : pygame . Surface = pygame . image . load ( Path ( ASSET_PATH ) / 'glitch.png' ) except FileNotFoundError : icon = None NAME : Literal [ 'Boilerplate Adventures' ] = 'Boilerplate Adventures' VERSION : Literal [ '1.0' ] = '1.0' OPTIONS : ClassVar = None LAST_EVENT_MISS : ClassVar = None MISSING_EVENTS : ClassVar = [] UNIMPLEMENTED_EVENTS : ClassVar = [] USE_FASTEVENTS : ClassVar = False # We add a layer of encapsulation here to simplify # the processing of events. New event types added # to the events module need to be accounted for here # if they're not already handled # # These are wired up at the end of __init__() EVENT_HANDLERS : ClassVar = { } def __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info () def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags ) def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers () def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' ) @property def screen_width ( self : Self ) -> int : \"\"\"Get the screen width. Args: None Returns: int: The screen width. \"\"\" return self . screen . get_width () @property def screen_height ( self : Self ) -> int : \"\"\"Get the screen height. Args: None Returns: int: The screen height. \"\"\" return self . screen . get_height () def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' ) def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' ) def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height )) @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' ) @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats () @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) ) def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type ) def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' ) def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' ) def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 ) # If the game hasn't hooked a call, we should check if the scene manager has. # # This will allow scenes to get pygame events directly, but we can still # hook those events in this engine, or in the subclassed game object, too. # # This allows maximum flexibility of event processing, with low overhead # at the expense of a slight layer violation. def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" )","title":"GameEngine"},{"location":"#glitchygames.engine.GameEngine.screen_height","text":"Get the screen height. Returns: int ( int ) \u2013 The screen height.","title":"screen_height"},{"location":"#glitchygames.engine.GameEngine.screen_width","text":"Get the screen width. Returns: int ( int ) \u2013 The screen width.","title":"screen_width"},{"location":"#glitchygames.engine.GameEngine.__del__","text":"Delete the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' )","title":"__del__"},{"location":"#glitchygames.engine.GameEngine.__getattr__","text":"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Parameters: attr ( str ) \u2013 The attribute to proxy. Returns: Callable ( Callable ) \u2013 The callable object. Source code in glitchygames/engine.py 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" )","title":"__getattr__"},{"location":"#glitchygames.engine.GameEngine.__init__","text":"Initialize the game engine. Parameters: game ( object ) \u2013 The game instance. icon ( Surface | Path | str , default: None ) \u2013 The game icon. Returns: None \u2013 None Source code in glitchygames/engine.py 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 def __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info ()","title":"__init__"},{"location":"#glitchygames.engine.GameEngine.args","text":"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser","title":"args"},{"location":"#glitchygames.engine.GameEngine.initialize_display","text":"Initialize the display. Returns: None \u2013 None Source code in glitchygames/engine.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags )","title":"initialize_display"},{"location":"#glitchygames.engine.GameEngine.initialize_event_handlers","text":"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Returns: None \u2013 None Source code in glitchygames/engine.py 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers ()","title":"initialize_event_handlers"},{"location":"#glitchygames.engine.GameEngine.initialize_input_event_handlers","text":"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Returns: None \u2013 None Source code in glitchygames/engine.py 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event","title":"initialize_input_event_handlers"},{"location":"#glitchygames.engine.GameEngine.initialize_system_icons","text":"Initialize system icons. Returns: None \u2013 None Source code in glitchygames/engine.py 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' )","title":"initialize_system_icons"},{"location":"#glitchygames.engine.GameEngine.missing_event","text":"Suppress unhandled on_*_event methods. We only want to log this once per event type. Parameters: *args \u2013 The args. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 )","title":"missing_event"},{"location":"#glitchygames.engine.GameEngine.post_game_event","text":"Post a game event. Parameters: event_subtype ( EventType ) \u2013 The event subtype. event_data ( dict ) \u2013 The event data. Returns: None \u2013 None Source code in glitchygames/engine.py 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' )","title":"post_game_event"},{"location":"#glitchygames.engine.GameEngine.print_game_info","text":"Print game information. Returns: None \u2013 None Source code in glitchygames/engine.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' )","title":"print_game_info"},{"location":"#glitchygames.engine.GameEngine.print_system_info","text":"Print system information. Returns: None \u2013 None Source code in glitchygames/engine.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' )","title":"print_system_info"},{"location":"#glitchygames.engine.GameEngine.process_audio_event","text":"Process an audio event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False","title":"process_audio_event"},{"location":"#glitchygames.engine.GameEngine.process_controller_event","text":"Process a controller event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False","title":"process_controller_event"},{"location":"#glitchygames.engine.GameEngine.process_drop_event","text":"Process a drop event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False","title":"process_drop_event"},{"location":"#glitchygames.engine.GameEngine.process_events","text":"Process events. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled","title":"process_events"},{"location":"#glitchygames.engine.GameEngine.process_game_event","text":"Process a game event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False","title":"process_game_event"},{"location":"#glitchygames.engine.GameEngine.process_joystick_event","text":"Process a joystick event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False","title":"process_joystick_event"},{"location":"#glitchygames.engine.GameEngine.process_keyboard_event","text":"Process a keyboard event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False","title":"process_keyboard_event"},{"location":"#glitchygames.engine.GameEngine.process_midi_event","text":"Process a midi event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False","title":"process_midi_event"},{"location":"#glitchygames.engine.GameEngine.process_mouse_event","text":"Process a mouse event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False","title":"process_mouse_event"},{"location":"#glitchygames.engine.GameEngine.process_text_event","text":"Process a text event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False","title":"process_text_event"},{"location":"#glitchygames.engine.GameEngine.process_touch_event","text":"Process a touch event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False","title":"process_touch_event"},{"location":"#glitchygames.engine.GameEngine.process_unimplemented_event","text":"Process an unimplemented event. Parameters: event ( Event ) \u2013 The event. Returns: None \u2013 None Source code in glitchygames/engine.py 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type )","title":"process_unimplemented_event"},{"location":"#glitchygames.engine.GameEngine.process_window_event","text":"Process a window event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False","title":"process_window_event"},{"location":"#glitchygames.engine.GameEngine.process_window_focus_event","text":"Process a window focus event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False","title":"process_window_focus_event"},{"location":"#glitchygames.engine.GameEngine.quit_game","text":"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Returns: None \u2013 None Source code in glitchygames/engine.py 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) )","title":"quit_game"},{"location":"#glitchygames.engine.GameEngine.register_game_event","text":"Register a game event. Parameters: event_type ( EventType ) \u2013 The event type. callback ( Callable ) \u2013 The callback. Returns: None \u2013 None Source code in glitchygames/engine.py 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback","title":"register_game_event"},{"location":"#glitchygames.engine.GameEngine.set_cursor","text":"Set the cursor. Parameters: cursor ( list [ str ] ) \u2013 The cursor. cursor_black ( str , default: '.' ) \u2013 The black cursor. cursor_white ( str , default: 'X' ) \u2013 The white cursor. cursor_xor ( str , default: 'o' ) \u2013 The xor cursor. Returns: list [ str ] \u2013 list[str]: The cursor. Source code in glitchygames/engine.py 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor","title":"set_cursor"},{"location":"#glitchygames.engine.GameEngine.start","text":"Start the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats ()","title":"start"},{"location":"#glitchygames.engine.GameEngine.suggested_resolution","text":"Suggest a resolution. Parameters: desired_width ( int , default: 0 ) \u2013 The desired width. desired_height ( int , default: 0 ) \u2013 The desired height. Returns: tuple [ int , int ] \u2013 tuple[int, int]: The suggested resolution. Source code in glitchygames/engine.py 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height ))","title":"suggested_resolution"},{"location":"#glitchygames.engine.GameEngine.suppress_event","text":"Suppress an event. Parameters: *args \u2013 The args. attr ( str ) \u2013 The attribute. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' )","title":"suppress_event"},{"location":"#glitchygames.engine.GameManager","text":"Bases: ResourceManager Game event manager. Source code in glitchygames/engine.pyclass GameManager ( events . ResourceManager ): \"\"\"Game event manager.\"\"\" log : logging . Logger = LOG class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )] @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser","title":"GameManager"},{"location":"#glitchygames.engine.GameManager.GameProxy","text":"Bases: ResourceManager Game event proxy. Source code in glitchygames/engine.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event )","title":"GameProxy"},{"location":"#glitchygames.engine.GameManager.GameProxy.__init__","text":"Initialize the game proxy. Parameters: **kwargs \u2013 Keyword arguments. Returns: None \u2013 None Source code in glitchygames/engine.py 58 59 60 61 62 63 64 65 66 67 68 69 def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ]","title":"__init__"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_active_event","text":"Handle active event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 71 72 73 74 75 76 77 78 79 80 81 def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event )","title":"on_active_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_fps_event","text":"Handle fps event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 83 84 85 86 87 88 89 90 91 92 93 def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event )","title":"on_fps_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_game_event","text":"Handle game event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 95 96 97 98 99 100 101 102 103 104 105 def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event )","title":"on_game_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_menu_item_event","text":"Handle menu item event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 107 108 109 110 111 112 113 114 115 116 117 def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event )","title":"on_menu_item_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_quit_event","text":"Handle quit event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 167 168 169 170 171 172 173 174 175 176 177 def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event )","title":"on_quit_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_sys_wm_event","text":"Handle sys wm event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 119 120 121 122 123 124 125 126 127 128 129 def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event )","title":"on_sys_wm_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_user_event","text":"Handle user event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 131 132 133 134 135 136 137 138 139 140 141 def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event )","title":"on_user_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_video_expose_event","text":"Handle video expose event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 143 144 145 146 147 148 149 150 151 152 153 def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event )","title":"on_video_expose_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_video_resize_event","text":"Handle video resize event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 155 156 157 158 159 160 161 162 163 164 165 def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event )","title":"on_video_resize_event"},{"location":"#glitchygames.engine.GameManager.__init__","text":"Initialize the game event manager. Parameters: game ( object , default: None ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/engine.py 179 180 181 182 183 184 185 186 187 188 189 def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )]","title":"__init__"},{"location":"#glitchygames.engine.GameManager.args","text":"Add arguments to the argument parser. Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser","title":"args"},{"location":"about/","text":"Vulnus orbem ante cum facti tantae Amantis nervo iactatis Lorem markdownum vivitur idem, requirit solidaque imagine parentum, belli. Commissus quia. Ille texerat: subiit coniuge ramus; Agenorides qui tantis Alcidae fila splendidior lecti Athin eveniunt delicuit tempore. Presserat greges Cytherea Antandro tela nam superis inde. Mitescere nec ad mea ponto mergis caelataeque Quae sonumque illis capellas agit Aram mihi concepit esse esse expalluit Typhoea Miserum niveae ingratus in bis erit quia somnus. Ubi fata fatalia, ligamina Cytherea! Ac deorum nisi, non locum, et plectrumque haut, et Acrota reddant aliisque. Ne petiit, patrio, omnem facto somnia. Par aquas nudorum Summa tertia est melius flebat locus relinquunt Montis quoque vides primusque per sparsum videbar Conplexibus frustraque hunc Ita tepidi quam lumina pennis Veretur et veniet Lumina Demoleonta procubuit Circe Est forte vixque, dixit eris vidi corpore posset usque, contractus replet. Ima patrios pendat vitiantes ignes. Haerebat sceleri. Famulus altior amante esse sontem cadunt mella, terrasque tetigere miserisque forma Philyreia vestras. Iacta quidem illa dum; capiti, clam serpit sorores, rectoque Palladaque aurata. Educta flectitque maior: quercus canae laedor agrestibus bella fingant. Fortibus umoribus factis vimque, mihi est aut limite cetera perfida. Enim nebula magni haud parvo frons, maris exanimi; tribuisse principiis. Manat insequitur , positis quid piasque, qui tantum, quisquis vana Cephalus velamina. Fert dictaque dolor, ira vel; ut densa si servor viscera bracchia, linquit est servat ictus anguipedum. Modo telae sic extemplo Venulus nomen vires dubitare, mollirique, aetas? Iter attolle omnia ripae vivaci plurima, media labique lacrimis Siculis ut litora sospite. Disiecta obruor meritum in aequore precor pedibusque pendentis.","title":"About"},{"location":"about/#vulnus-orbem-ante-cum-facti-tantae","text":"","title":"Vulnus orbem ante cum facti tantae"},{"location":"about/#amantis-nervo-iactatis","text":"Lorem markdownum vivitur idem, requirit solidaque imagine parentum, belli. Commissus quia. Ille texerat: subiit coniuge ramus; Agenorides qui tantis Alcidae fila splendidior lecti Athin eveniunt delicuit tempore. Presserat greges Cytherea Antandro tela nam superis inde. Mitescere nec ad mea ponto mergis caelataeque Quae sonumque illis capellas agit Aram mihi concepit esse esse expalluit Typhoea Miserum niveae ingratus in bis erit quia somnus. Ubi fata fatalia, ligamina Cytherea! Ac deorum nisi, non locum, et plectrumque haut, et Acrota reddant aliisque. Ne petiit, patrio, omnem facto somnia. Par aquas nudorum Summa tertia est melius flebat locus relinquunt Montis quoque vides primusque per sparsum videbar Conplexibus frustraque hunc Ita tepidi quam lumina pennis Veretur et veniet","title":"Amantis nervo iactatis"},{"location":"about/#lumina-demoleonta-procubuit-circe","text":"Est forte vixque, dixit eris vidi corpore posset usque, contractus replet. Ima patrios pendat vitiantes ignes. Haerebat sceleri. Famulus altior amante esse sontem cadunt mella, terrasque tetigere miserisque forma Philyreia vestras. Iacta quidem illa dum; capiti, clam serpit sorores, rectoque Palladaque aurata. Educta flectitque maior: quercus canae laedor agrestibus bella fingant. Fortibus umoribus factis vimque, mihi est aut limite cetera perfida. Enim nebula magni haud parvo frons, maris exanimi; tribuisse principiis. Manat insequitur , positis quid piasque, qui tantum, quisquis vana Cephalus velamina. Fert dictaque dolor, ira vel; ut densa si servor viscera bracchia, linquit est servat ictus anguipedum. Modo telae sic extemplo Venulus nomen vires dubitare, mollirique, aetas? Iter attolle omnia ripae vivaci plurima, media labique lacrimis Siculis ut litora sospite. Disiecta obruor meritum in aequore precor pedibusque pendentis.","title":"Lumina Demoleonta procubuit Circe"}]}