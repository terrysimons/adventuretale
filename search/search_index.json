{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Reference Contains GameEngine and helper classes for building a game. GameEngine Bases: EventManager Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. Source code in glitchygames/engine.pyclass GameEngine ( events . EventManager ): \"\"\"Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. \"\"\" log : logging . Logger = LOG game : object = None try : icon : pygame . Surface = pygame . image . load ( Path ( ASSET_PATH ) / 'glitch.png' ) except FileNotFoundError : icon = None NAME : Literal [ 'Boilerplate Adventures' ] = 'Boilerplate Adventures' VERSION : Literal [ '1.0' ] = '1.0' OPTIONS : ClassVar = None LAST_EVENT_MISS : ClassVar = None MISSING_EVENTS : ClassVar = [] UNIMPLEMENTED_EVENTS : ClassVar = [] USE_FASTEVENTS : ClassVar = False # We add a layer of encapsulation here to simplify # the processing of events. New event types added # to the events module need to be accounted for here # if they're not already handled # # These are wired up at the end of __init__() EVENT_HANDLERS : ClassVar = { } def __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info () def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags ) def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers () def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' ) @property def screen_width ( self : Self ) -> int : \"\"\"Get the screen width. Args: None Returns: int: The screen width. \"\"\" return self . screen . get_width () @property def screen_height ( self : Self ) -> int : \"\"\"Get the screen height. Args: None Returns: int: The screen height. \"\"\" return self . screen . get_height () def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' ) def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' ) def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height )) @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' ) @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats () @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) ) def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type ) def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' ) def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' ) def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 ) # If the game hasn't hooked a call, we should check if the scene manager has. # # This will allow scenes to get pygame events directly, but we can still # hook those events in this engine, or in the subclassed game object, too. # # This allows maximum flexibility of event processing, with low overhead # at the expense of a slight layer violation. def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" ) screen_height : int property Get the screen height. Returns: int ( int ) \u2013 The screen height. screen_width : int property Get the screen width. Returns: int ( int ) \u2013 The screen width. __del__ () Delete the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' ) __getattr__ ( attr ) Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Parameters: attr ( str ) \u2013 The attribute to proxy. Returns: Callable ( Callable ) \u2013 The callable object. Source code in glitchygames/engine.py 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" ) __init__ ( game , icon = None ) Initialize the game engine. Parameters: game ( object ) \u2013 The game instance. icon ( Surface | Path | str , default: None ) \u2013 The game icon. Returns: None \u2013 None Source code in glitchygames/engine.py 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 def __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info () args ( parser ) classmethod Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser initialize_display () Initialize the display. Returns: None \u2013 None Source code in glitchygames/engine.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags ) initialize_event_handlers () Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Returns: None \u2013 None Source code in glitchygames/engine.py 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers () initialize_input_event_handlers () Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Returns: None \u2013 None Source code in glitchygames/engine.py 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event initialize_system_icons () Initialize system icons. Returns: None \u2013 None Source code in glitchygames/engine.py 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' ) missing_event ( * args , ** kwargs ) Suppress unhandled on_*_event methods. We only want to log this once per event type. Parameters: *args \u2013 The args. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 ) post_game_event ( event_subtype , event_data ) Post a game event. Parameters: event_subtype ( EventType ) \u2013 The event subtype. event_data ( dict ) \u2013 The event data. Returns: None \u2013 None Source code in glitchygames/engine.py 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' ) print_game_info () Print game information. Returns: None \u2013 None Source code in glitchygames/engine.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' ) print_system_info () Print system information. Returns: None \u2013 None Source code in glitchygames/engine.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' ) process_audio_event ( event ) Process an audio event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False process_controller_event ( event ) Process a controller event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False process_drop_event ( event ) Process a drop event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False process_events () Process events. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled process_game_event ( event ) Process a game event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False process_joystick_event ( event ) Process a joystick event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False process_keyboard_event ( event ) Process a keyboard event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False process_midi_event ( event ) Process a midi event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False process_mouse_event ( event ) Process a mouse event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False process_text_event ( event ) Process a text event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False process_touch_event ( event ) Process a touch event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False process_unimplemented_event ( event ) Process an unimplemented event. Parameters: event ( Event ) \u2013 The event. Returns: None \u2013 None Source code in glitchygames/engine.py 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type ) process_window_event ( event ) Process a window event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False process_window_focus_event ( event ) Process a window focus event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False quit_game () classmethod Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Returns: None \u2013 None Source code in glitchygames/engine.py 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) ) register_game_event ( event_type , callback ) Register a game event. Parameters: event_type ( EventType ) \u2013 The event type. callback ( Callable ) \u2013 The callback. Returns: None \u2013 None Source code in glitchygames/engine.py 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback set_cursor ( cursor , cursor_black = '.' , cursor_white = 'X' , cursor_xor = 'o' ) classmethod Set the cursor. Parameters: cursor ( list [ str ] ) \u2013 The cursor. cursor_black ( str , default: '.' ) \u2013 The black cursor. cursor_white ( str , default: 'X' ) \u2013 The white cursor. cursor_xor ( str , default: 'o' ) \u2013 The xor cursor. Returns: list [ str ] \u2013 list[str]: The cursor. Source code in glitchygames/engine.py 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor start () Start the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats () suggested_resolution ( desired_width = 0 , desired_height = 0 ) Suggest a resolution. Parameters: desired_width ( int , default: 0 ) \u2013 The desired width. desired_height ( int , default: 0 ) \u2013 The desired height. Returns: tuple [ int , int ] \u2013 tuple[int, int]: The suggested resolution. Source code in glitchygames/engine.py 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height )) suppress_event ( * args , attr , ** kwargs ) Suppress an event. Parameters: *args \u2013 The args. attr ( str ) \u2013 The attribute. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' ) GameManager Bases: ResourceManager Game event manager. Source code in glitchygames/engine.pyclass GameManager ( events . ResourceManager ): \"\"\"Game event manager.\"\"\" log : logging . Logger = LOG class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )] @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser GameProxy Bases: ResourceManager Game event proxy. Source code in glitchygames/engine.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) __init__ ( ** kwargs ) Initialize the game proxy. Parameters: **kwargs \u2013 Keyword arguments. Returns: None \u2013 None Source code in glitchygames/engine.py 58 59 60 61 62 63 64 65 66 67 68 69 def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] on_active_event ( event ) Handle active event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 71 72 73 74 75 76 77 78 79 80 81 def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) on_fps_event ( event ) Handle fps event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 83 84 85 86 87 88 89 90 91 92 93 def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) on_game_event ( event ) Handle game event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 95 96 97 98 99 100 101 102 103 104 105 def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) on_menu_item_event ( event ) Handle menu item event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 107 108 109 110 111 112 113 114 115 116 117 def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) on_quit_event ( event ) Handle quit event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 167 168 169 170 171 172 173 174 175 176 177 def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) on_sys_wm_event ( event ) Handle sys wm event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 119 120 121 122 123 124 125 126 127 128 129 def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) on_user_event ( event ) Handle user event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 131 132 133 134 135 136 137 138 139 140 141 def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) on_video_expose_event ( event ) Handle video expose event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 143 144 145 146 147 148 149 150 151 152 153 def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) on_video_resize_event ( event ) Handle video resize event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 155 156 157 158 159 160 161 162 163 164 165 def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) __init__ ( game = None ) Initialize the game event manager. Parameters: game ( object , default: None ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/engine.py 179 180 181 182 183 184 185 186 187 188 189 def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )] args ( parser ) classmethod Add arguments to the argument parser. Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#reference","text":"Contains GameEngine and helper classes for building a game.","title":"Reference"},{"location":"#glitchygames.engine.GameEngine","text":"Bases: EventManager Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. Source code in glitchygames/engine.pyclass GameEngine ( events . EventManager ): \"\"\"Glitchy Games' Game engine. The game engine is responsible for initializing pygame and handling events. It also provides a number of helper methods for common tasks such as setting the screen resolution and setting the cursor. Every Glitchy Game game inherits the GameEngine command line options, so you can add your own command line options by implementing the args() class method in your Scene class. \"\"\" log : logging . Logger = LOG game : object = None try : icon : pygame . Surface = pygame . image . load ( Path ( ASSET_PATH ) / 'glitch.png' ) except FileNotFoundError : icon = None NAME : Literal [ 'Boilerplate Adventures' ] = 'Boilerplate Adventures' VERSION : Literal [ '1.0' ] = '1.0' OPTIONS : ClassVar = None LAST_EVENT_MISS : ClassVar = None MISSING_EVENTS : ClassVar = [] UNIMPLEMENTED_EVENTS : ClassVar = [] USE_FASTEVENTS : ClassVar = False # We add a layer of encapsulation here to simplify # the processing of events. New event types added # to the events module need to be accounted for here # if they're not already handled # # These are wired up at the end of __init__() EVENT_HANDLERS : ClassVar = { } def __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info () def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags ) def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers () def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' ) @property def screen_width ( self : Self ) -> int : \"\"\"Get the screen width. Args: None Returns: int: The screen width. \"\"\" return self . screen . get_width () @property def screen_height ( self : Self ) -> int : \"\"\"Get the screen height. Args: None Returns: int: The screen height. \"\"\" return self . screen . get_height () def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' ) def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' ) def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height )) @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' ) @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats () @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) ) def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type ) def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' ) def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' ) def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 ) # If the game hasn't hooked a call, we should check if the scene manager has. # # This will allow scenes to get pygame events directly, but we can still # hook those events in this engine, or in the subclassed game object, too. # # This allows maximum flexibility of event processing, with low overhead # at the expense of a slight layer violation. def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" )","title":"GameEngine"},{"location":"#glitchygames.engine.GameEngine.screen_height","text":"Get the screen height. Returns: int ( int ) \u2013 The screen height.","title":"screen_height"},{"location":"#glitchygames.engine.GameEngine.screen_width","text":"Get the screen width. Returns: int ( int ) \u2013 The screen width.","title":"screen_width"},{"location":"#glitchygames.engine.GameEngine.__del__","text":"Delete the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def __del__ ( self : Self ) -> None : \"\"\"Delete the game engine. Args: None Returns: None \"\"\" # This is the total # of sprites. self . log . info ( f 'Sprite Count: { Sprite . SPRITE_COUNT } ' ) # This is a count of each type of sprite. for sprite_type , counters in Sprite . SPRITE_COUNTERS . items (): # sprite_count = Sprite.SPRITE_COUNTERS[sprite_type][key] for key , value in counters . items (): self . log . info ( f ' { sprite_type } Sprite { key } : { value } ' )","title":"__del__"},{"location":"#glitchygames.engine.GameEngine.__getattr__","text":"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Parameters: attr ( str ) \u2013 The attribute to proxy. Returns: Callable ( Callable ) \u2013 The callable object. Source code in glitchygames/engine.py 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 def __getattr__ ( self : Self , attr : str ) -> Callable : \"\"\"Suppress unhandled on_*_event methods. If the attribute being looked up is not an on_*_event attribute, raise AttributeError as usual. Args: attr (str): The attribute to proxy. Returns: Callable: The callable object. \"\"\" if attr . startswith ( 'on_' ) and attr . endswith ( '_event' ): self . LAST_EVENT_MISS : str = attr return self . missing_event raise AttributeError ( f \"' { type ( self ) } ' object has no attribute ' { attr } '\" )","title":"__getattr__"},{"location":"#glitchygames.engine.GameEngine.__init__","text":"Initialize the game engine. Parameters: game ( object ) \u2013 The game instance. icon ( Surface | Path | str , default: None ) \u2013 The game icon. Returns: None \u2013 None Source code in glitchygames/engine.pydef __init__ ( self : Self , game : object , icon : pygame . Surface | Path | str = None ) -> None : \"\"\"Initialize the game engine. Args: game: The game instance. icon: The game icon. Returns: None \"\"\" super () . __init__ () # If it's not a pygame.Surface, assume it's a path if icon and not isinstance ( icon , pygame . Surface ): icon_path : Path = Path ( icon ) try : icon : pygame . Surface = pygame . image . load ( icon_path ) except FileNotFoundError : icon = None GameEngine . icon = icon parser : argparse . ArgumentParser = argparse . ArgumentParser ( f ' { game . NAME } version { game . VERSION } ' ) parser = GameEngine . args ( parser ) # args is a class method, which allows us to call it before initializing a game # object, which allows us to query all of the game engine objects for their # command line parameters. try : game . args ( parser . add_argument_group ( f ' { game . NAME } v { game . VERSION } Options' )) except AttributeError : self . log . info ( 'Game does not implement arguments. ' 'Add a def args(parser) class method.' ) args : argparse . ArgumentParser = parser . parse_args () # Set the logging level logging . basicConfig ( format = ' %(name)s - %(levelname)s - %(message)s ' , level = args . log_level . upper () ) GameEngine . OPTIONS : dict [ str , Any ] = vars ( args ) # Some optimizations to reduce the number of lookups if GameEngine . OPTIONS [ 'log_level' ] in [ 'DEBUG' , 'CRITICAL' , 'ERROR' ]: GameEngine . OPTIONS [ 'debug_events' ] = True else : GameEngine . OPTIONS [ 'debug_events' ] = False options : dict [ str , Any ] = GameEngine . OPTIONS # Back propagate the options game . options = options # TODO @<terry.simons@gmail.com>: Decouple game from event manager # so we can have clean separation for unhandled events # https://glitchy-games.atlassian.net/browse/GG-22 super () . __init__ () self . _active_scene : Scene = None # Pygame stuff. pygame . register_quit ( self . quit_game ) self . fps : float = options . get ( 'fps' , 0.0 ) self . update_type = options . get ( 'update_type' ) self . use_gfxdraw = options . get ( 'use_gfxdraw' ) self . windowed = options . get ( 'windowed' ) self . desired_resolution = options . get ( 'resolution' ) self . fps_refresh_rate = options . get ( 'fps_refresh_rate' ) self . pygame_version = { 'major' : 0 , 'minor' : 0 , 'patch' : 0 } self . pygame_version [ 'major' ] = pygame . version . vernum [ 0 ] self . pygame_version [ 'minor' ] = pygame . version . vernum [ 1 ] self . pygame_version [ 'patch' ] = pygame . version . vernum [ 2 ] # For compatibility with older versions of pygame, use fast events # # For versions >= 2.2, we can use the new event loop if pygame . version . vernum [ 0 ] < 2 and pygame . version . vernum [ 1 ] < 2 : # noqa: PLR2004 self . USE_FASTEVENTS = True # Initialize all of the Pygame modules. self . init_pass , self . init_fail = pygame . init () self . print_game_info () # Enable fast events for multithreaded applications on older # versions of pygame, or use the new event loop for newer # versions of pygame >= 2.2 if self . USE_FASTEVENTS : self . log . info ( f 'Using pygame.fastevents for pygame version { pygame . version . ver } ' ) pygame . fastevent . init () else : # This is the default mode when USE_FASTEVENTS is disabled. # # pygame.event doesn't have an init() method, so nothing to do. self . log . info ( f 'Using pygame.events for pygame version { pygame . version . ver } ' ) # We are fully initialized now, so we can set up the scene. # # The scene will start once .start() is called on the GameEngine # object GameEngine . game = game self . scene_manager : SceneManager = SceneManager () # Resolution initialization. # Convert our resolution to a tuple ( desired_width , desired_height ) = self . desired_resolution . split ( 'x' ) if self . windowed : self . mode_flags : int = 0 else : self . mode_flags = pygame . FULLSCREEN self . desired_resolution : tuple [ int , int ] = self . suggested_resolution ( desired_width , desired_height ) # window icon and system tray/dock icon self . initialize_system_icons () # Initialize display self . initialize_display () self . initialize_event_handlers () self . print_system_info ()","title":"__init__"},{"location":"#glitchygames.engine.GameEngine.args","text":"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add Glitchy Games arguments to the argument parser. All Glitchy Games will inherit these arguments. Supported Arguments: -f, --target-fps --fps-refresh-rate -w, --windowed -r, --resolution --use-gfxdraw --update-type --video-driver Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Graphics Options' ) group . add_argument ( '-f' , '--target-fps' , help = 'cap the framerate (default: infinite)' , type = float , default = 0.0 ) group . add_argument ( '--fps-refresh-rate' , help = 'how often to update the FPS counter in ms (default: 1000)' , default = 1000 ) group . add_argument ( '-w' , '--windowed' , help = 'run the program in windowed mode' , action = 'store_true' , default = True ) group . add_argument ( '-r' , '--resolution' , help = 'the resolution to use (default: 1024x768)' , default = '800x480' ) group . add_argument ( '--use-gfxdraw' , action = 'store_true' , default = False ) group . add_argument ( '--update-type' , help = 'update or flip (default: update)' , choices = [ 'update' , 'flip' ], default = 'update' ) # See https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode default_videodriver = [] if platform . system () == 'Linux' : linux_videodriver_choices = [ 'x11' , 'dga' , 'fbcon' , 'directfb' , 'ggi' , 'vgl' , 'svgalib' , 'aalib' ] LOG . debug ( f 'Linux Video Driver Choices: { linux_videodriver_choices } ' ) default_videodriver = linux_videodriver_choices elif platform . system () == 'MacOS' : mac_videodriver_choices = [] LOG . debug ( f 'Mac Video Driver Choices: { mac_videodriver_choices } ' ) default_videodriver = mac_videodriver_choices elif platform . system () == 'Windows' : windows_videodriver_choices = [ 'windib' , 'directx' ] LOG . debug ( f 'Windows Video Driver Choices: { windows_videodriver_choices } ' ) default_videodriver = windows_videodriver_choices group . add_argument ( '--video-driver' , default = None , choices = default_videodriver ) event_managers = ( AudioManager , DropManager , ControllerManager , FontManager , GameManager , JoystickManager , KeyboardManager , MidiManager , MouseManager , WindowManager ) for event_manager in event_managers : parser = event_manager . args ( parser = parser ) return parser","title":"args"},{"location":"#glitchygames.engine.GameEngine.initialize_display","text":"Initialize the display. Returns: None \u2013 None Source code in glitchygames/engine.py 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 def initialize_display ( self : Self ) -> None : \"\"\"Initialize the display. Args: None Returns: None \"\"\" # Let's try to set a resolution to the most compatible for # the system. If we don't provide any parameters, we'll get # a reasonble default, but you should consider whether that's # a good idea for your particular application. # # There are various caveats for hardware accelerated blitting # that make it undesirable in a lot of cases, so we'll just use # software. self . display_info = pygame . display . Info () self . initial_resolution : tuple [ int , int ] = ( self . display_info . current_w , self . display_info . current_h ) self . cursor : list [ str ] = self . set_cursor ( cursor = None ) # Set the screen update type. if self . scene_manager . update_type == 'update' : self . display_update = pygame . display . update elif self . scene_manager . update_type == 'flip' : self . display_update = pygame . display . flip else : self . log . error ( 'Screen update type was neither \"update\" nor \"flip\".' ) # The Pygame documentation recommends against using hardware accelerated blitting. # # Note that you can also get the screen with pygame.display.get_surface() self . screen : pygame . Surface = pygame . display . set_mode ( self . desired_resolution , self . mode_flags )","title":"initialize_display"},{"location":"#glitchygames.engine.GameEngine.initialize_event_handlers","text":"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Returns: None \u2013 None Source code in glitchygames/engine.py 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 def initialize_event_handlers ( self : Self ) -> None : \"\"\"Initialize event handlers. The engine calls this on your behalf. Event subsystem bootstrapping This gives us much faster event processing than doing a lookup every time an event comes in since we can just call the processing function directly. It's not as fast as a raw pygame event loop, but since we layer richer event types on top of the pygame raw events, this gives us a nice balance of extensibility with performance. Args: None Returns: None \"\"\" for event_type in events . AUDIO_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_audio_event for event_type in events . MIDI_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_midi_event for event_type in events . WINDOW_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_window_event for event_type in events . GAME_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_game_event self . initialize_input_event_handlers ()","title":"initialize_event_handlers"},{"location":"#glitchygames.engine.GameEngine.initialize_input_event_handlers","text":"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Returns: None \u2013 None Source code in glitchygames/engine.py 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 def initialize_input_event_handlers ( self : Self ) -> None : \"\"\"Initialize input event handlers. The engine calls this on your behalf. This initializes the input event handlers. Args: None Returns: None \"\"\" for event_type in events . CONTROLLER_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_controller_event for event_type in events . DROP_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_drop_event for event_type in events . TOUCH_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_touch_event for event_type in events . JOYSTICK_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_joystick_event for event_type in events . KEYBOARD_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_keyboard_event for event_type in events . MOUSE_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_mouse_event for event_type in events . TEXT_EVENTS : GameEngine . EVENT_HANDLERS [ event_type ] = self . process_text_event","title":"initialize_input_event_handlers"},{"location":"#glitchygames.engine.GameEngine.initialize_system_icons","text":"Initialize system icons. Returns: None \u2013 None Source code in glitchygames/engine.py 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 def initialize_system_icons ( self : Self ) -> None : \"\"\"Initialize system icons. Args: None Returns: None \"\"\" # Set the window icon. # # Always call this before you call set_mode() icon : pygame . Surface = getattr ( self . game , 'icon' , GameEngine . icon ) if icon is None : icon = pygame . Surface (( 32 , 32 )) icon . fill ( PURPLE ) pygame . display . set_icon ( icon ) # Set the display caption. pygame . display . set_caption ( f ' { type ( self ) . NAME } v { self . VERSION } ' , f ' { type ( self ) . NAME } v { self . VERSION } ' ) # Get captions: ( title , icontitle ) = pygame . display . get_caption () self . log . info ( f 'Window Title: { title } ' ) self . log . info ( f 'Icon Title: { icontitle } ' )","title":"initialize_system_icons"},{"location":"#glitchygames.engine.GameEngine.missing_event","text":"Suppress unhandled on_*_event methods. We only want to log this once per event type. Parameters: *args \u2013 The args. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 def missing_event ( self : Self , * args , ** kwargs ) -> None : \"\"\"Suppress unhandled on_*_event methods. We only want to log this once per event type. Args: *args: The args. **kwargs: The kwargs. Returns: None \"\"\" # TODO: Add options that can be enabled in the engine to raise an exception # when an unimplemented event is called. if self . LAST_EVENT_MISS not in self . MISSING_EVENTS : self . MISSING_EVENTS . append ( self . LAST_EVENT_MISS ) self . log . info ( f 'Unimplemented method called: { self . LAST_EVENT_MISS }{ args } , { kwargs } ' ) self . suppress_event ( * args , attr = self . LAST_EVENT_MISS , ** kwargs ) # Ensures we can always ctrl-c in cases where event spam occurs. time . sleep ( 0 )","title":"missing_event"},{"location":"#glitchygames.engine.GameEngine.post_game_event","text":"Post a game event. Parameters: event_subtype ( EventType ) \u2013 The event subtype. event_data ( dict ) \u2013 The event data. Returns: None \u2013 None Source code in glitchygames/engine.py 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 def post_game_event ( self : Self , event_subtype : pygame . event . EventType , event_data : dict ) -> None : \"\"\"Post a game event. Args: event_subtype (pygame.event.EventType): The event subtype. event_data (dict): The event data. Returns: None \"\"\" event : pygame . event . Event = event_data . copy () event [ 'subtype' ] = event_subtype pygame . event . post ( pygame . event . Event ( events . GAMEEVENT , event ) ) self . log . debug ( f 'Posted Event: { event } ' )","title":"post_game_event"},{"location":"#glitchygames.engine.GameEngine.print_game_info","text":"Print game information. Returns: None \u2013 None Source code in glitchygames/engine.py 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 def print_game_info ( self : Self ) -> None : \"\"\"Print game information. Args: None Returns: None \"\"\" self . log . debug ( f 'Successfully loaded { self . init_pass } modules ' f 'and failed loading { self . init_fail } modules.' ) self . log . info ( 'Game Title: ' f ' { type ( self ) . NAME } ' ) self . log . info ( 'Game Version: ' f ' { type ( self ) . VERSION } ' )","title":"print_game_info"},{"location":"#glitchygames.engine.GameEngine.print_system_info","text":"Print system information. Returns: None \u2013 None Source code in glitchygames/engine.py 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 def print_system_info ( self : Self ) -> None : \"\"\"Print system information. Args: None Returns: None \"\"\" # General Info # TODO: put pygame version in here, too. self . log . info ( f 'CPU Count: { multiprocessing . cpu_count () } ' ) self . log . info ( f 'System: { platform . system () } ' ) self . log . info ( f 'Machine: { platform . machine () } ' ) self . log . info ( f 'Platform: { platform . platform () } ' ) self . log . info ( f 'Platform (Terse): { platform . platform ( aliased = 0 , terse = 1 ) } ' ) self . log . info ( f 'Processor: { platform . processor () } ' ) self . log . info ( f 'Release: { platform . release () } ' ) # Set up a display mode. # Note: pygame.display.init() isn't necessary here # because we've already called pygame.init() which # initializes all available modules. # # Let's do a sanity check and make sure we're initialized. self . log . info ( f 'Display inited: { pygame . display . get_init () } ' ) # Display some configuration information. self . log . info ( f 'SDL Version: { pygame . get_sdl_version () } ' ) self . log . info ( f 'SDL Byte Order: { pygame . get_sdl_byteorder () } ' ) # Dump a bit more info about the configured mode. self . log . info ( 'Display Driver: ' f ' { pygame . display . get_driver () } ' ) self . log . info ( 'Display Info: ' f ' { self . display_info } ' ) self . log . info ( 'Initial Resolution: ' f ' { self . initial_resolution } ' ) self . log . info ( '8-bit Modes: ' f ' { pygame . display . list_modes ( 8 ) } ' ) self . log . info ( '16-bit Modes: ' f ' { pygame . display . list_modes ( 16 ) } ' ) self . log . info ( '24-bit Modes: ' f ' { pygame . display . list_modes ( 24 ) } ' ) self . log . info ( '32-bit Modes: ' f ' { pygame . display . list_modes ( 32 ) } ' ) self . log . info ( 'Best Color Depth: ' f ' { pygame . display . mode_ok ( self . initial_resolution ), self . mode_flags } ' f ' ( { self . mode_flags } )' ) self . log . info ( 'Window Manager Info: ' f ' { pygame . display . get_wm_info () } ' ) self . log . info ( 'Platform Timer Resolution: ' f ' { pygame . TIMER_RESOLUTION } ' )","title":"print_system_info"},{"location":"#glitchygames.engine.GameEngine.process_audio_event","text":"Process an audio event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 def process_audio_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process an audio event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . AUDIODEVICEADDED : # AUDIODEVICEADDED which, iscapture self . audio_manager . on_audio_device_added_event ( event ) return True if event . type == pygame . AUDIODEVICEREMOVED : # AUDIODEVICEREMOVED which, iscapture self . audio_manager . on_audio_device_removed_event ( event ) return True return False","title":"process_audio_event"},{"location":"#glitchygames.engine.GameEngine.process_controller_event","text":"Process a controller event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 def process_controller_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a controller event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . CONTROLLERAXISMOTION : self . controller_manager . on_controller_axis_motion_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADMOTION : self . controller_manager . on_controller_touchpad_motion_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONDOWN : self . controller_manager . on_controller_button_down_event ( event ) return True if event . type == pygame . CONTROLLERBUTTONUP : self . controller_manager . on_controller_button_up_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADDOWN : self . controller_manager . on_controller_touchpad_down_event ( event ) return True if event . type == pygame . CONTROLLERTOUCHPADUP : self . controller_manager . on_controller_touchpad_up_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMOVED : self . controller_manager . on_controller_device_removed_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEADDED : self . controller_manager . on_controller_device_added_event ( event ) return True if event . type == pygame . CONTROLLERDEVICEREMAPPED : self . controller_manager . on_controller_device_remapped_event ( event ) return True # We haven't handled this event, so let's see if it's a controller init event return False","title":"process_controller_event"},{"location":"#glitchygames.engine.GameEngine.process_drop_event","text":"Process a drop event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 def process_drop_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a drop event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . DROPBEGIN : self . drop_manager . on_drop_begin_event ( event ) return True if event . type == pygame . DROPCOMPLETE : self . drop_manager . on_drop_complete_event ( event ) return True if event . type == pygame . DROPFILE : self . drop_manager . on_drop_file_event ( event ) return True if event . type == pygame . DROPTEXT : self . drop_manager . on_drop_text_event ( event ) return True return False","title":"process_drop_event"},{"location":"#glitchygames.engine.GameEngine.process_events","text":"Process events. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 def process_events ( self : Self ) -> bool : \"\"\"Process events. Args: None Returns: bool: True if the event was handled, False otherwise. \"\"\" event_was_handled = False # To use events in a different thread, use the fastevent package from pygame. # if you're using pygame < 2.2, you'll need to use pygame.fastevent. # if you're using pygame >= 2.2, you can use the new pygame.event. # You can create your own new events with the pygame.event.Event() object type. pump_events = pygame . event . get if self . USE_FASTEVENTS : pump_events = pygame . fastevent . get for raw_event in pump_events (): event = HashableEvent ( type = raw_event . type ) event . __dict__ . update ( raw_event . dict ) # breakpoint() if event . type in GameEngine . EVENT_HANDLERS : event_was_handled = GameEngine . EVENT_HANDLERS [ event . type ]( event ) # If an event is in the event handler map, but the function # called didn't handle the event in question, we'll process it # as an uinimplemented event if not event_was_handled : self . process_unimplemented_event ( event ) return False return event_was_handled","title":"process_events"},{"location":"#glitchygames.engine.GameEngine.process_game_event","text":"Process a game event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 def process_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a game event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" # Game events are listed in the order they're most # likely to occur in. match event . type : case events . FPSEVENT : # FPSEVENT is pygame.USEREVENT + 1 self . game_manager . on_fps_event ( event ) return True case events . GAMEEVENT : # GAMEEVENT is pygame.USEREVENT + 2 self . game_manager . on_game_event ( event ) return True case events . MENUEVENT : # MENUEVENT is pygame.USEREVENT + 3 self . game_manager . on_menu_item_event ( event ) return True case pygame . ACTIVEEVENT : # ACTIVEEVENT gain, state self . game_manager . on_active_event ( event ) return True case pygame . USEREVENT : # USEREVENT code self . game_manager . on_user_event ( event ) return True case pygame . VIDEORESIZE : # VIDEORESIZE size, w, h self . game_manager . on_video_resize_event ( event ) return True case pygame . VIDEOEXPOSE : # VIDEOEXPOSE none self . game_manager . on_video_expose_event ( event ) return True case pygame . SYSWMEVENT : # SYSWMEVENT self . game_manager . on_sys_wm_event ( event ) return True case pygame . QUIT : # QUIT none self . game_manager . on_quit_event ( event ) return True return False","title":"process_game_event"},{"location":"#glitchygames.engine.GameEngine.process_joystick_event","text":"Process a joystick event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 def process_joystick_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a joystick event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . JOYAXISMOTION : # JOYAXISMOTION joy, axis, value self . joystick_manager . on_joy_axis_motion_event ( event ) return True if event . type == pygame . JOYBALLMOTION : # JOYBALLMOTION joy, ball, rel self . joystick_manager . on_joy_ball_motion_event ( event ) return True if event . type == pygame . JOYHATMOTION : # JOYHATMOTION joy, hat, value self . joystick_manager . on_joy_hat_motion_event ( event ) return True if event . type == pygame . JOYBUTTONUP : # JOYBUTTONUP joy, button self . joystick_manager . on_joy_button_up_event ( event ) return True if event . type == pygame . JOYBUTTONDOWN : # JOYBUTTONDOWN joy, button self . joystick_manager . on_joy_button_down_event ( event ) return True if event . type == pygame . JOYDEVICEADDED : self . joystick_manager . on_joy_device_added_event ( event ) return True if event . type == pygame . JOYDEVICEREMOVED : self . joystick_manager . on_joy_device_removed_event ( event ) return True return False","title":"process_joystick_event"},{"location":"#glitchygames.engine.GameEngine.process_keyboard_event","text":"Process a keyboard event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 def process_keyboard_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a keyboard event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . KEYDOWN : # KEYDOWN unicode, key, mod self . keyboard_manager . on_key_down_event ( event ) return True if event . type == pygame . KEYUP : # KEYUP key, mod self . keyboard_manager . on_key_up_event ( event ) return True return False","title":"process_keyboard_event"},{"location":"#glitchygames.engine.GameEngine.process_midi_event","text":"Process a midi event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 def process_midi_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a midi event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MIDIIN : self . log . info ( f 'MIDIIN: { event } NOT IMPLEMENTED' ) return True if event . type == pygame . MIDIOUT : self . log . info ( f 'MIDIOUT: { event } NOT IMPLEMENTED' ) return True return False","title":"process_midi_event"},{"location":"#glitchygames.engine.GameEngine.process_mouse_event","text":"Process a mouse event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 def process_mouse_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a mouse event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . MOUSEMOTION : # MOUSEMOTION pos, rel, buttons self . mouse_manager . on_mouse_motion_event ( event ) return True if event . type == pygame . MOUSEBUTTONUP : # MOUSEBUTTONUP pos, button self . mouse_manager . on_mouse_button_up_event ( event ) return True if event . type == pygame . MOUSEBUTTONDOWN : # MOUSEBUTTONDOWN pos, button self . mouse_manager . on_mouse_button_down_event ( event ) return True if event . type == pygame . MOUSEWHEEL : self . mouse_manager . on_mouse_wheel_event ( event ) return True return False","title":"process_mouse_event"},{"location":"#glitchygames.engine.GameEngine.process_text_event","text":"Process a text event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 def process_text_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process a text event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . TEXTEDITING : self . process_unimplemented_event ( event ) return True if event . type == pygame . TEXTINPUT : self . process_unimplemented_event ( event ) return True return False","title":"process_text_event"},{"location":"#glitchygames.engine.GameEngine.process_touch_event","text":"Process a touch event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 def process_touch_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a touch event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . FINGERDOWN : self . touch_manager . on_touch_down_event ( event ) return True if event . type == pygame . FINGERUP : self . touch_manager . on_touch_up_event ( event ) return True if event . type == pygame . FINGERMOTION : self . touch_manager . on_touch_motion_event ( event ) return True return False","title":"process_touch_event"},{"location":"#glitchygames.engine.GameEngine.process_unimplemented_event","text":"Process an unimplemented event. Parameters: event ( Event ) \u2013 The event. Returns: None \u2013 None Source code in glitchygames/engine.py 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 def process_unimplemented_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Process an unimplemented event. Args: event (pygame.event.Event): The event. Returns: None \"\"\" if event . type not in self . UNIMPLEMENTED_EVENTS : self . log . debug ( '(UNIMPLEMENTED) ' f ' { pygame . event . event_name ( event . type ) . upper () } : { event } ' ) self . UNIMPLEMENTED_EVENTS . append ( event . type )","title":"process_unimplemented_event"},{"location":"#glitchygames.engine.GameEngine.process_window_event","text":"Process a window event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( None ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 def process_window_event ( self : Self , event : pygame . event . Event ) -> None : # noqa: PLR0912 \"\"\"Process a window event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSIZECHANGED : # WINDOWSIZECHANGED x, y self . window_manager . on_window_size_changed_event ( event ) return True if event . type == pygame . WINDOWRESTORED : self . window_manager . on_window_restored_event ( event ) return True if event . type == pygame . WINDOWHITTEST : self . window_manager . on_window_hit_test_event ( event ) return True if event . type == pygame . WINDOWHIDDEN : # WINDOWHIDDEN x, y self . window_manager . on_window_hidden_event ( event ) return True if event . type == pygame . WINDOWMINIMIZED : # WINDOWMINIMIZED x, y self . window_manager . on_window_minimized_event ( event ) return True if event . type == pygame . WINDOWMAXIMIZED : # WINDOWMAXIMIZED x, y self . window_manager . on_window_maximized_event ( event ) return True if event . type == pygame . WINDOWMOVED : # WINDOWMOVED x, y self . window_manager . on_window_moved_event ( event ) return True if event . type == pygame . WINDOWCLOSE : # WINDOWCLOSE self . window_manager . on_window_close_event ( event ) return True if event . type == pygame . WINDOWEXPOSED : self . window_manager . on_window_exposed_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : # WINDOWFOCUSLOST self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : # WINDOWFOCUSGAINED self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWRESIZED : # WINDOWRESIZED x, y self . window_manager . on_window_resized_event ( event ) return True if event . type == pygame . WINDOWLEAVE : # WINDOWLEAVE self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWENTER : # WINDOWENTER self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWSHOWN : # WINDOWSHOWN self . window_manager . on_window_shown_event ( event ) return True return False","title":"process_window_event"},{"location":"#glitchygames.engine.GameEngine.process_window_focus_event","text":"Process a window focus event. Parameters: event ( Event ) \u2013 The event. Returns: bool ( bool ) \u2013 True if the event was handled, False otherwise. Source code in glitchygames/engine.py 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 def process_window_focus_event ( self : Self , event : pygame . event . Event ) -> bool : \"\"\"Process a window focus event. Args: event (pygame.event.Event): The event. Returns: bool: True if the event was handled, False otherwise. \"\"\" if event . type == pygame . WINDOWSHOWN : self . window_manager . on_window_shown_event ( event ) return True if event . type == pygame . WINDOWLEAVE : self . window_manager . on_window_leave_event ( event ) return True if event . type == pygame . WINDOWFOCUSGAINED : self . window_manager . on_window_focus_gained_event ( event ) return True if event . type == pygame . WINDOWFOCUSLOST : self . window_manager . on_window_focus_lost_event ( event ) return True if event . type == pygame . WINDOWENTER : self . window_manager . on_window_enter_event ( event ) return True if event . type == pygame . WINDOWTAKEFOCUS : self . window_manager . on_window_take_focus_event ( event ) return True return False","title":"process_window_focus_event"},{"location":"#glitchygames.engine.GameEngine.quit_game","text":"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Returns: None \u2013 None Source code in glitchygames/engine.py 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 @classmethod def quit_game ( cls : Self ) -> None : \"\"\"Quit the game. Emits a pygame.event.Event(pygame.QUIT, {}) event. Args: None Returns: None \"\"\" # put a quit event in the event queue. pygame . event . post ( pygame . event . Event ( pygame . QUIT , {}) )","title":"quit_game"},{"location":"#glitchygames.engine.GameEngine.register_game_event","text":"Register a game event. Parameters: event_type ( EventType ) \u2013 The event type. callback ( Callable ) \u2013 The callback. Returns: None \u2013 None Source code in glitchygames/engine.py 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 def register_game_event ( self : Self , event_type : pygame . event . EventType , callback : Callable ) -> None : \"\"\"Register a game event. Args: event_type (pygame.event.EventType): The event type. callback (Callable): The callback. Returns: None \"\"\" # This registers a subtype of type GAMEEVENT to call a callback. self . log . info ( f 'Registering event type \" { event_type } \" for { callback } ' ) self . registered_events [ event_type ] = callback","title":"register_game_event"},{"location":"#glitchygames.engine.GameEngine.set_cursor","text":"Set the cursor. Parameters: cursor ( list [ str ] ) \u2013 The cursor. cursor_black ( str , default: '.' ) \u2013 The black cursor. cursor_white ( str , default: 'X' ) \u2013 The white cursor. cursor_xor ( str , default: 'o' ) \u2013 The xor cursor. Returns: list [ str ] \u2013 list[str]: The cursor. Source code in glitchygames/engine.py 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 @classmethod def set_cursor ( cls : Self , cursor : list [ str ], cursor_black : str = '.' , cursor_white : str = 'X' , cursor_xor : str = 'o' ) -> list [ str ]: \"\"\"Set the cursor. Args: cursor (list[str]): The cursor. cursor_black (str): The black cursor. cursor_white (str): The white cursor. cursor_xor (str): The xor cursor. Returns: list[str]: The cursor. \"\"\" if not cursor : # Cursor setup. # Cursor width/height must be a multiple of 8 cursor = [ 'XX ' , 'XXX ' , 'XXXX ' , 'XX.XX ' , 'XX..XX ' , 'XX...XX ' , 'XX....XX ' , 'XX.....XX ' , 'XX......XX ' , 'XX.......XX ' , 'XX........XX ' , 'XX........XXX ' , 'XX......XXXXX ' , 'XX.XXX..XX ' , 'XXXX XX..XX ' , 'XX XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XX..XX ' , ' XXXX ' , ' XX ' , ' ' , ' ' , ' ' ] cursor_width : int = len ( cursor [ 0 ]) cursor_height : int = len ( cursor ) # cursor = cursor # Compile our cursor so we can draw it to the screen. cursor_data , cursor_mask = pygame . cursors . compile ( cursor , black = cursor_black , white = cursor_white , xor = cursor_xor ) # Now set the cursor as the active cursor. pygame . mouse . set_cursor ( ( cursor_width , cursor_height ), ( 0 , 0 ), cursor_data , cursor_mask ) return cursor","title":"set_cursor"},{"location":"#glitchygames.engine.GameEngine.start","text":"Start the game engine. Returns: None \u2013 None Source code in glitchygames/engine.py 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 def start ( self : Self ) -> None : \"\"\"Start the game engine. Args: None Returns: None \"\"\" try : if GameEngine . OPTIONS [ 'profile' ]: profiler = cProfile . Profile () profiler . enable () # Initialize the game instance self . game = self . game ( options = GameEngine . OPTIONS ) self . scene_manager . game_engine = self self . registered_events = {} self . audio_manager = AudioManager ( game = self . scene_manager ) self . drop_manager = DropManager ( game = self . scene_manager ) self . controller_manager = ControllerManager ( game = self . scene_manager ) self . touch_manager = TouchManager ( game = self . scene_manager ) # https://glitchy-games.atlassian.net/browse/GG-23 self . font_manager = FontManager ( game = self . scene_manager ) self . game_manager = GameManager ( game = self . scene_manager ) self . joystick_manager = JoystickManager ( game = self . scene_manager ) self . keyboard_manager = KeyboardManager ( game = self . scene_manager ) self . midi_manager = MidiManager ( game = self . scene_manager ) self . mouse_manager = MouseManager ( game = self . scene_manager ) self . window_manager = WindowManager ( game = self . scene_manager ) # Get count of joysticks self . joysticks = [] if self . joystick_manager : self . joysticks = self . joystick_manager . joysticks self . joystick_count = len ( self . joysticks ) self . scene_manager . switch_to_scene ( self . game ) self . scene_manager . start () except Exception : self . log . exception ( 'Error starting game.' ) finally : pygame . display . quit () pygame . quit () if GameEngine . OPTIONS [ 'profile' ]: profiler . disable () profiler . print_stats ()","title":"start"},{"location":"#glitchygames.engine.GameEngine.suggested_resolution","text":"Suggest a resolution. Parameters: desired_width ( int , default: 0 ) \u2013 The desired width. desired_height ( int , default: 0 ) \u2013 The desired height. Returns: tuple [ int , int ] \u2013 tuple[int, int]: The suggested resolution. Source code in glitchygames/engine.py 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 def suggested_resolution ( self : Self , desired_width : int = 0 , desired_height : int = 0 ) -> tuple [ int , int ]: \"\"\"Suggest a resolution. Args: desired_width (int): The desired width. desired_height (int): The desired height. Returns: tuple[int, int]: The suggested resolution. \"\"\" # For Ubuntu 19.04, we can't reset the original res # so let's just let the system figure it out. if platform . system () == 'Linux' : if 'arm' not in platform . machine (): self . log . info ( 'Ignoring full screen resolution change on Linux.' ) else : # RPi Hack # # The Raspberry Pi screen exposes # 2 resolutions, but only one works properly desired_width : Literal [ 800 ] = 800 desired_height : Literal [ 480 ] = 480 return ( int ( desired_width ), int ( desired_height ))","title":"suggested_resolution"},{"location":"#glitchygames.engine.GameEngine.suppress_event","text":"Suppress an event. Parameters: *args \u2013 The args. attr ( str ) \u2013 The attribute. **kwargs \u2013 The kwargs. Returns: None \u2013 None Source code in glitchygames/engine.py 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 def suppress_event ( self : Self , * args , attr : str , ** kwargs ) -> None : \"\"\"Suppress an event. Args: *args: The args. attr (str): The attribute. **kwargs: The kwargs. Returns: None \"\"\" self . log . debug ( f 'Suppressing event: { attr } ( { args } , { kwargs } )' )","title":"suppress_event"},{"location":"#glitchygames.engine.GameManager","text":"Bases: ResourceManager Game event manager. Source code in glitchygames/engine.py 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 class GameManager ( events . ResourceManager ): \"\"\"Game event manager.\"\"\" log : logging . Logger = LOG class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event ) def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )] @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser","title":"GameManager"},{"location":"#glitchygames.engine.GameManager.GameProxy","text":"Bases: ResourceManager Game event proxy. Source code in glitchygames/engine.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 class GameProxy ( events . ResourceManager ): \"\"\"Game event proxy.\"\"\" log : logging . Logger = LOG def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ] def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event ) def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event ) def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event ) def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event ) def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event ) def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event ) def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event ) def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event ) def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event )","title":"GameProxy"},{"location":"#glitchygames.engine.GameManager.GameProxy.__init__","text":"Initialize the game proxy. Parameters: **kwargs \u2013 Keyword arguments. Returns: None \u2013 None Source code in glitchygames/engine.py 58 59 60 61 62 63 64 65 66 67 68 69 def __init__ ( self : Self , ** kwargs ) -> None : \"\"\"Initialize the game proxy. Args: **kwargs: Keyword arguments. Returns: None \"\"\" super () . __init__ ( ** kwargs ) self . game : object = kwargs . get ( 'game' ) self . proxies = [ self . game ]","title":"__init__"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_active_event","text":"Handle active event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 71 72 73 74 75 76 77 78 79 80 81 def on_active_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle active event. Args: event: The pygame event. Returns: None \"\"\" # ACTIVEEVENT gain, state self . game . on_active_event ( event = event )","title":"on_active_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_fps_event","text":"Handle fps event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 83 84 85 86 87 88 89 90 91 92 93 def on_fps_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle fps event. Args: event: The pygame event. Returns: None \"\"\" # FPSEVENT is pygame.USEREVENT + 1 self . game . on_fps_event ( event = event )","title":"on_fps_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_game_event","text":"Handle game event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 95 96 97 98 99 100 101 102 103 104 105 def on_game_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle game event. Args: event: The pygame event. Returns: None \"\"\" # GAMEEVENT is pygame.USEREVENT + 2 self . game . on_game_event ( event = event )","title":"on_game_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_menu_item_event","text":"Handle menu item event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 107 108 109 110 111 112 113 114 115 116 117 def on_menu_item_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle menu item event. Args: event: The pygame event. Returns: None \"\"\" # MENUEVENT is pygame.USEREVENT + 3 self . game . on_menu_item_event ( event = event )","title":"on_menu_item_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_quit_event","text":"Handle quit event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 167 168 169 170 171 172 173 174 175 176 177 def on_quit_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle quit event. Args: event: The pygame event. Returns: None \"\"\" # QUIT none self . game . on_quit_event ( event = event )","title":"on_quit_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_sys_wm_event","text":"Handle sys wm event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 119 120 121 122 123 124 125 126 127 128 129 def on_sys_wm_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle sys wm event. Args: event: The pygame event. Returns: None \"\"\" # SYSWMEVENT self . game . on_sys_wm_event ( event = event )","title":"on_sys_wm_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_user_event","text":"Handle user event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 131 132 133 134 135 136 137 138 139 140 141 def on_user_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle user event. Args: event: The pygame event. Returns: None \"\"\" # USEREVENT code self . game . on_user_event ( event = event )","title":"on_user_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_video_expose_event","text":"Handle video expose event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 143 144 145 146 147 148 149 150 151 152 153 def on_video_expose_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video expose event. Args: event: The pygame event. Returns: None \"\"\" # VIDEOEXPOSE none self . game . on_video_expose_event ( event = event )","title":"on_video_expose_event"},{"location":"#glitchygames.engine.GameManager.GameProxy.on_video_resize_event","text":"Handle video resize event. Parameters: event ( Event ) \u2013 The pygame event. Returns: None \u2013 None Source code in glitchygames/engine.py 155 156 157 158 159 160 161 162 163 164 165 def on_video_resize_event ( self : Self , event : pygame . event . Event ) -> None : \"\"\"Handle video resize event. Args: event: The pygame event. Returns: None \"\"\" # VIDEORESIZE size, w, h self . game . on_video_resize_event ( event = event )","title":"on_video_resize_event"},{"location":"#glitchygames.engine.GameManager.__init__","text":"Initialize the game event manager. Parameters: game ( object , default: None ) \u2013 The game instance. Returns: None \u2013 None Source code in glitchygames/engine.py 179 180 181 182 183 184 185 186 187 188 189 def __init__ ( self : Self , game : object = None ) -> None : \"\"\"Initialize the game event manager. Args: game: The game instance. Returns: None \"\"\" super () . __init__ ( game = game ) self . proxies : list [ GameManager . GameProxy ] = [ GameManager . GameProxy ( game = game )]","title":"__init__"},{"location":"#glitchygames.engine.GameManager.args","text":"Add arguments to the argument parser. Parameters: parser ( ArgumentParser ) \u2013 The argument parser. Returns: ArgumentParser \u2013 None Source code in glitchygames/engine.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 @classmethod def args ( cls : Self , parser : argparse . ArgumentParser ) -> argparse . ArgumentParser : \"\"\"Add arguments to the argument parser. Args: parser (argparse.ArgumentParser): The argument parser. Returns: None \"\"\" group = parser . add_argument_group ( 'Game Options' ) group . add_argument ( '-l' , '--log-level' , help = 'set the logging level' , choices = [ 'debug' , 'info' , 'warning' , 'error' , 'critical' ], default = 'info' ) group . add_argument ( '--no-unhandled-events' , help = 'fail on unhandled events' , action = 'store_true' , default = False ) group . add_argument ( '-p' , '--profile' , help = 'enable profiling' , action = 'store_true' , default = False ) return parser","title":"args"},{"location":"about/","text":"Vulnus orbem ante cum facti tantae Amantis nervo iactatis Lorem markdownum vivitur idem, requirit solidaque imagine parentum, belli. Commissus quia. Ille texerat: subiit coniuge ramus; Agenorides qui tantis Alcidae fila splendidior lecti Athin eveniunt delicuit tempore. Presserat greges Cytherea Antandro tela nam superis inde. Mitescere nec ad mea ponto mergis caelataeque Quae sonumque illis capellas agit Aram mihi concepit esse esse expalluit Typhoea Miserum niveae ingratus in bis erit quia somnus. Ubi fata fatalia, ligamina Cytherea! Ac deorum nisi, non locum, et plectrumque haut, et Acrota reddant aliisque. Ne petiit, patrio, omnem facto somnia. Par aquas nudorum Summa tertia est melius flebat locus relinquunt Montis quoque vides primusque per sparsum videbar Conplexibus frustraque hunc Ita tepidi quam lumina pennis Veretur et veniet Lumina Demoleonta procubuit Circe Est forte vixque, dixit eris vidi corpore posset usque, contractus replet. Ima patrios pendat vitiantes ignes. Haerebat sceleri. Famulus altior amante esse sontem cadunt mella, terrasque tetigere miserisque forma Philyreia vestras. Iacta quidem illa dum; capiti, clam serpit sorores, rectoque Palladaque aurata. Educta flectitque maior: quercus canae laedor agrestibus bella fingant. Fortibus umoribus factis vimque, mihi est aut limite cetera perfida. Enim nebula magni haud parvo frons, maris exanimi; tribuisse principiis. Manat insequitur , positis quid piasque, qui tantum, quisquis vana Cephalus velamina. Fert dictaque dolor, ira vel; ut densa si servor viscera bracchia, linquit est servat ictus anguipedum. Modo telae sic extemplo Venulus nomen vires dubitare, mollirique, aetas? Iter attolle omnia ripae vivaci plurima, media labique lacrimis Siculis ut litora sospite. Disiecta obruor meritum in aequore precor pedibusque pendentis.","title":"About"},{"location":"about/#vulnus-orbem-ante-cum-facti-tantae","text":"","title":"Vulnus orbem ante cum facti tantae"},{"location":"about/#amantis-nervo-iactatis","text":"Lorem markdownum vivitur idem, requirit solidaque imagine parentum, belli. Commissus quia. Ille texerat: subiit coniuge ramus; Agenorides qui tantis Alcidae fila splendidior lecti Athin eveniunt delicuit tempore. Presserat greges Cytherea Antandro tela nam superis inde. Mitescere nec ad mea ponto mergis caelataeque Quae sonumque illis capellas agit Aram mihi concepit esse esse expalluit Typhoea Miserum niveae ingratus in bis erit quia somnus. Ubi fata fatalia, ligamina Cytherea! Ac deorum nisi, non locum, et plectrumque haut, et Acrota reddant aliisque. Ne petiit, patrio, omnem facto somnia. Par aquas nudorum Summa tertia est melius flebat locus relinquunt Montis quoque vides primusque per sparsum videbar Conplexibus frustraque hunc Ita tepidi quam lumina pennis Veretur et veniet","title":"Amantis nervo iactatis"},{"location":"about/#lumina-demoleonta-procubuit-circe","text":"Est forte vixque, dixit eris vidi corpore posset usque, contractus replet. Ima patrios pendat vitiantes ignes. Haerebat sceleri. Famulus altior amante esse sontem cadunt mella, terrasque tetigere miserisque forma Philyreia vestras. Iacta quidem illa dum; capiti, clam serpit sorores, rectoque Palladaque aurata. Educta flectitque maior: quercus canae laedor agrestibus bella fingant. Fortibus umoribus factis vimque, mihi est aut limite cetera perfida. Enim nebula magni haud parvo frons, maris exanimi; tribuisse principiis. Manat insequitur , positis quid piasque, qui tantum, quisquis vana Cephalus velamina. Fert dictaque dolor, ira vel; ut densa si servor viscera bracchia, linquit est servat ictus anguipedum. Modo telae sic extemplo Venulus nomen vires dubitare, mollirique, aetas? Iter attolle omnia ripae vivaci plurima, media labique lacrimis Siculis ut litora sospite. Disiecta obruor meritum in aequore precor pedibusque pendentis.","title":"Lumina Demoleonta procubuit Circe"}]}