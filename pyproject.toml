[tool.poetry]
name = "glitchygames"
version = "1.0.0"
description = "Glitchy Games and Tools for Pygame and Python 3"
authors = [
    "Terry Simons <terry.simons@gmail.com>",
    "Rich Saupe <sabadam32@gmail.com>",
]
maintainers = [
    "Terry Simons <terry.simons@gmail.com>",
    "Rich Saupe <sabadam32@gmail.com>",
]
readme = "README.md"
license = "BSD-3-Clause"
classifiers = [
    "Programming Language :: Python :: 3.9",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent"
]
include = [
  'glitchygames/assets',
  'glitchygames/config',
  'glitchygames/resources',
  'glitchygames/fonts',
  'glitchygames/tools'
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/terrysimons/glitchygames/issues/"
"homepage" = "https://glitchygames.ai/"
"documentation" = "https://glitchygames.ai/documentation/"

[tool.poetry.scripts]
bitmappy = "glitchygames.tools.bitmappy:main"

[tool.poetry.dependencies]
python = ">= 3.12, < 4.0"
toml = "^0.10.2"
pygame = "^2.1.3"
future = "^0.18.3"
cookiecutter = "^2.3.0"

[tool.poetry.group.dev.dependencies]
nox = "*"
nox-poetry = "*"
pytest = "*"
ruff = "*"
pre-commit = "*"
sphinx = "*"

[tool.ruff]
line-length = 100
output-format = "grouped"
ignore-init-module-imports = true
src = ["glitchygames", "tests", "scripts"]
task-tags = ["HACK", "TODO", "FIXME", "XXX", "NOTE", "BUG", "OPTIMIZE", "WIP"]
include = ["glitchygames/*.py", "tests/**/*.py", "scripts/**/*.py", "noxfile.py"]
extend-include = []
select = [
  "E",
  "F",
  "W"
]
extend-select = [
  "RUF100", # Unused `noqa` directive
  "ANN",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  "S",
  "BLE",
  "COM",
  "CPY",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  "ISC",
  "ICN",
  "G",
  "INP",
  "PIE",
  "T20",
  "PYI",
  "PT",
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TCH",
  "INT",
  "ARG",
  "PTH",
  "TD",
  "FIX",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  "NPY",
  "AIR",
  "PERF",
  "RUF",
  "FBT",
  "B",
  "A",
  "D",
]
ignore = [
  #"ASYN",
  "FIX002", # Line contains TODO, consider resolving the issue
  "SLF001", # Private member accessed (Needed for some annotations, like argparse._ArgumentGroup)
  "S311", # Standard pseudo-random generators are not suitable for security/cryptographic purposes.
  "COM812", # Trailing comma missing
  "G004", # Logging statement uses f-string
  "ISC002", # Use of implicit string concatenation
  "ERA001", # Found commented-out code
  "PLR0911", # Too many return statements
  "C901", # Function is too complex
  "EM102", # Exception must not use an f-string literal, assign to variable first
  "TRY003", # Avoid specifying long messages outside the exception class
  "ARG002", # Unused method argument: `args`
  "TD003", # Missing issue link on the line following this TODO
  "PLR0913", # Too many arguments to function call
  "TD002", # Missing author in TODO
  "ANN002", # Missing type annotation for `*args`
  "ANN003", # Missing type annotation for `**kwargs`
]
# exclude = []
# extend-exclude = []
fixable = [
  "I001",
  "Q000",
  "EXE001",
  "ANN"
]
unfixable = []
target-version = "py312"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
ignore-fully-untyped = false

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.pydocstyle]
convention = "google"

# [tool.pylama]
# linters = "eradicate,mccabe,mypy,pycodestyle,pydocstyle,pyflakes,pylint,isort"
# skip = ".nox/*"

# pydocstyle
# Options that shouldn't be turned off:
#
# C0103: Variable name "<var>" doesn't conform to snake_case naming style. [pylint]
# D203: 1 blank line required before class docstring [pydocstyle, pep257]
# D212 Multi-line docstring summary should start at the first line [pydocstyle]
# R0902: Too many instance attributes [pylint]
# R0903: Too few public methods [pylint]
# R0904: Too many public methods [pylint]
# E1121: Too many positional arguments for lambda call [pylint]
  # https://github.com/PyCQA/pylint/issues/2144
# W1202 - W1202 Use % formatting in logging functions and pass the % parameters as arguments [pylint]
# W1203 - W1203 Use % formatting in logging functions and pass the % parameters as arguments [pylint]
  # https://github.com/PyCQA/pylint/issues/2395

# C0111 - Docstrings.
# D100 - Docstrings.
# D101 - Docstrings.
# D102 - Docstrings.
# D103 - Docstrings.
# D104 - Docstrings.
# D105 - Docstrings.
# D106 - Docstrings
# D107 - Docstrings.
# ignore = "C0103,C0111,D203,D212,E1121,R0902,R0903,R0904,W1202,W1203,D100,D101,D102,D103,D104,D105,D106,D107,D417,D204,D400,W0611,D415,D401,D210,D202,D213,D205,D413,D411,D200"
# max_line_length = "100"

# [tool.pylama.linter.pylint]
# ignored_modules = "pygame"

# [tool.pylama.pydocstyle]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
